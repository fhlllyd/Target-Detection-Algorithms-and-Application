# Импорт необходимых библиотек
import cv2  # Библиотека OpenCV для обработки изображений
import numpy as np  # Библиотека NumPy для численных расчетов

# Определение пути к изображению
imgpath = r'C:\Users\Lenovo\Desktop\car...jpg'

# Чтение изображения
image = cv2.imread(imgpath)
if image is None:  # Проверка успешности чтения изображения
    print("Не удалось прочитать изображение")
    exit()  # Если изображение не прочитано, выходим из программы

# Преобразование вayscale
# OpenCV по умолчанию читает изображения в формате BGR, преобразуем вayscale для дальнейшей обработки
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Бинаризация изображения
# Используем пороговую операцию для преобразованияayscale изображения в бинарное, чтобы облегчить обнаружение контуров
_, binary = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)

# Поиск контуров на бинарном изображении
# Используем функцию cv2.findContours для поиска контуров на бинарном изображении
contours, _ = cv2.findContours(binary, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

# Перебор каждого контура
for cont in contours:
    # Минимальный описывающий прямоугольник
    # Вычисляем минимальный описывающий прямоугольник для контура, возвращаем центр прямоугольника, его ширину и высоту, а также угол поворота
    rect = cv2.minAreaRect(cont)
    box = cv2.boxPoints(rect)  # Получаем координаты четырех вершин прямоугольника
    box = np.int0(box)  # Преобразуем координаты в целые числа

    # Вывод в консоль размеров прямоугольника
    # Обратите внимание: прямоугольник, возвращаемый minAreaRect, поворотный, поэтому ширина и высота отличаются от обычных прямоугольников
    width = int(rect[1][0])  # Ширина прямоугольника
    height = int(rect[1][1])  # Высота прямоугольника
    angle = rect[2]  # Угол поворота прямоугольника
    print(
        f"Минимальный описывающий прямоугольник в точке ({box[0][0]}, {box[0][1]}) с шириной {width}, высотой {height}, угол {angle} градусов"
    )  # Выводим информацию о прямоугольнике

    # Рисование предсказанного прямоугольника на исходном изображении
    # Используем функцию cv2.polylines для рисования прямоугольника на исходном изображении, зеленым цветом, толщина линии 5
    cv2.polylines(image, [box], True, (0, 255, 0), 5)

# Отображение обработанного изображения
cv2.imshow('Обработанное изображение', image)  # Создаем окно и отображаем обработанное изображение
cv2.waitKey(0)  # Ожидаем нажатия любой клавиши
cv2.destroyAllWindows()  # Закрываем все окна

# Примечание: вышеуказанный код сначала изменяет размер изображения на 640*640
# Если необходимо сохранить обработанное изображение, можно снять комментарий со следующей строки кода
# cv2.imwrite('123.png', image)