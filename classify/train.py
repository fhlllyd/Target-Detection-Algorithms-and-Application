# YOLOv5 üöÄ by Ultralytics, GPL-3.0 license
"""
Train a YOLOv5 classifier model on a classification dataset

Usage - Single-GPU training:
    $ python classify/train.py --model yolov5s-cls.pt --data imagenette160 --epochs 5 --img 224

Usage - Multi-GPU DDP training:
    $ python -m torch.distributed.run --nproc_per_node 4 --master_port 1 classify/train.py --model yolov5s-cls.pt --data imagenet --epochs 5 --img 224 --device 0,1,2,3

Datasets:           --data mnist, fashion-mnist, cifar10, cifar100, imagenette, imagewoof, imagenet, or 'path/to/data'
YOLOv5-cls models:  --model yolov5n-cls.pt, yolov5s-cls.pt, yolov5m-cls.pt, yolov5l-cls.pt, yolov5x-cls.pt
Torchvision models: --model resnet50, efficientnet_b0, etc. See https://pytorch.org/vision/stable/models.html
"""

import argparse
import os
import subprocess
import sys
import time
from copy import deepcopy
from datetime import datetime
from pathlib import Path

import torch
import torch.distributed as dist
import torch.hub as hub
import torch.optim.lr_scheduler as lr_scheduler
import torchvision
from torch.cuda import amp
from tqdm import tqdm

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
FILE = Path(__file__).resolve()
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é YOLOv5
ROOT = FILE.parents[1]
# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π, –µ—Å–ª–∏ –µ–µ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
if str(ROOT) not in sys.path:
    sys.path.append(str(ROOT))
# –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
ROOT = Path(os.path.relpath(ROOT, Path.cwd()))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª—è classify
from classify import val as validate
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∏–∑ –º–æ–¥—É–ª—è models.experimental
from models.experimental import attempt_load
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –º–æ–¥–µ–ª–µ–π –∏–∑ –º–æ–¥—É–ª—è models.yolo
from models.yolo import ClassificationModel, DetectionModel
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–æ–¥—É–ª—è utils.dataloaders
from utils.dataloaders import create_classification_dataloader
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∏–∑ –º–æ–¥—É–ª—è utils.general
from utils.general import (DATASETS_DIR, LOGGER, TQDM_BAR_FORMAT, WorkingDirectory, check_git_info, check_git_status,
                           check_requirements, colorstr, download, increment_path, init_seeds, print_args, yaml_save)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –ª–æ–≥–≥–µ—Ä–∞ –∏–∑ –º–æ–¥—É–ª—è utils.loggers
from utils.loggers import GenericLogger
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –º–æ–¥—É–ª—è utils.plots
from utils.plots import imshow_cls
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PyTorch –∏–∑ –º–æ–¥—É–ª—è utils.torch_utils
from utils.torch_utils import (ModelEMA, model_info, reshape_classifier_output, select_device, smart_DDP,
                               smart_optimizer, smartCrossEntropyLoss, torch_distributed_zero_first)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞
LOCAL_RANK = int(os.getenv('LOCAL_RANK', -1))
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞
RANK = int(os.getenv('RANK', -1))
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
WORLD_SIZE = int(os.getenv('WORLD_SIZE', 1))
# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
GIT_INFO = check_git_info()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
def train(opt, device):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
    init_seeds(opt.seed + 1 + RANK, deterministic=True)
    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
    save_dir, data, bs, epochs, nw, imgsz, pretrained = \
        opt.save_dir, Path(opt.data), opt.batch_size, opt.epochs, min(os.cpu_count() - 1, opt.workers), \
        opt.imgsz, str(opt.pretrained).lower() == 'true'
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏ –º—ã CUDA
    cuda = device.type != 'cpu'

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–∏
    wdir = save_dir / 'weights'
    wdir.mkdir(parents=True, exist_ok=True)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏ –ª—É—á—à–∏–º –≤–µ—Å–∞–º –º–æ–¥–µ–ª–∏
    last, best = wdir / 'last.pt', wdir / 'best.pt'

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—É—Å–∫–∞ –≤ —Ñ–∞–π–ª
    yaml_save(save_dir / 'opt.yaml', vars(opt))

    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –≥–ª–∞–≤–Ω—ã–π
    logger = GenericLogger(opt=opt, console_logger=LOGGER) if RANK in {-1, 0} else None

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    with torch_distributed_zero_first(LOCAL_RANK), WorkingDirectory(ROOT):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –Ω–∞–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö
        data_dir = data if data.is_dir() else (DATASETS_DIR / data)
        if not data_dir.is_dir():
            LOGGER.info(f'\nDataset not found ‚ö†Ô∏è, missing path {data_dir}, attempting download...')
            t = time.time()
            if str(data) == 'imagenet':
                subprocess.run(f"bash {ROOT / 'data/scripts/get_imagenet.sh'}", shell=True, check=True)
            else:
                url = f'https://github.com/ultralytics/yolov5/releases/download/v1.0/{data}.zip'
                download(url, dir=data_dir.parent)
            s = f"Dataset download success ‚úÖ ({time.time() - t:.1f}s), saved to {colorstr('bold', data_dir)}\n"
            LOGGER.info(s)

    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤ –≤ –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö
    nc = len([x for x in (data_dir / 'train').glob('*') if x.is_dir()])
    trainloader = create_classification_dataloader(path=data_dir / 'train',
                                                   imgsz=imgsz,
                                                   batch_size=bs // WORLD_SIZE,
                                                   augment=True,
                                                   cache=opt.cache,
                                                   rank=LOCAL_RANK,
                                                   workers=nw)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –Ω–∞–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_dir = data_dir / 'test' if (data_dir / 'test').exists() else data_dir / 'val'
    if RANK in {-1, 0}:
        testloader = create_classification_dataloader(path=test_dir,
                                                      imgsz=imgsz,
                                                      batch_size=bs // WORLD_SIZE * 2,
                                                      augment=False,
                                                      cache=opt.cache,
                                                      rank=-1,
                                                      workers=nw)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    with torch_distributed_zero_first(LOCAL_RANK), WorkingDirectory(ROOT):
        if Path(opt.model).is_file() or opt.model.endswith('.pt'):
            model = attempt_load(opt.model, device='cpu', fuse=False)
        elif opt.model in torchvision.models.__dict__:
            model = torchvision.models.__dict__[opt.model](weights='IMAGENET1K_V1' if pretrained else None)
        else:
            m = hub.list('ultralytics/yolov5')
            raise ModuleNotFoundError(f'--model {opt.model} not found. Available models are: \n' + '\n'.join(m))
        if isinstance(model, DetectionModel):
            LOGGER.warning("WARNING ‚ö†Ô∏è pass YOLOv5 classifier model with '-cls' suffix, i.e. '--model yolov5s-cls.pt'")
            model = ClassificationModel(model=model, nc=nc, cutoff=opt.cutoff or 10)
        reshape_classifier_output(model, nc)
    for m in model.modules():
        if not pretrained and hasattr(m, 'reset_parameters'):
            m.reset_parameters()
        if isinstance(m, torch.nn.Dropout) and opt.dropout is not None:
            m.p = opt.dropout
    for p in model.parameters():
        p.requires_grad = True
    model = model.to(device)

    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
    if RANK in {-1, 0}:
        model.names = trainloader.dataset.classes
        model.transforms = testloader.dataset.torch_transforms
        model_info(model)
        if opt.verbose:
            LOGGER.info(model)
        images, labels = next(iter(trainloader))
        file = imshow_cls(images[:25], labels[:25], names=model.names, f=save_dir / 'train_images.jpg')
        logger.log_images(file, name='Train Examples')
        logger.log_graph(model, imgsz)

    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
    optimizer = smart_optimizer(model, opt.optimizer, opt.lr0, momentum=0.9, decay=opt.decay)

    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è
    lrf = 0.01
    lf = lambda x: (1 - x / epochs) * (1 - lrf) + lrf
    scheduler = lr_scheduler.LambdaLR(optimizer, lr_lambda=lf)

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä EMA (Exponential Moving Average)
    ema = ModelEMA(model) if RANK in {-1, 0} else None

    # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    if cuda and RANK != -1:
        model = smart_DDP(model)

    # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    t0 = time.time()
    criterion = smartCrossEntropyLoss(label_smoothing=opt.label_smoothing)
    best_fitness = 0.0
    scaler = amp.GradScaler(enabled=cuda)
    val = test_dir.stem
    LOGGER.info(f'Image sizes {imgsz} train, {imgsz} test\n'
                f'Using {nw * WORLD_SIZE} dataloader workers\n'
                f"Logging results to {colorstr('bold', save_dir)}\n"
                f'Starting {opt.model} training on {data} dataset with {nc} classes for {epochs} epochs...\n\n'
                f"{'Epoch':>10}{'GPU_mem':>10}{'train_loss':>12}{f'{val}_loss':>12}{'top1_acc':>12}{'top5_acc':>12}")
    for epoch in range(epochs):
        tloss, vloss, fitness = 0.0, 0.0, 0.0
        model.train()
        if RANK != -1:
            trainloader.sampler.set_epoch(epoch)
        pbar = enumerate(trainloader)
        if RANK in {-1, 0}:
            pbar = tqdm(enumerate(trainloader), total=len(trainloader), bar_format=TQDM_BAR_FORMAT)
        for i, (images, labels) in pbar:
            images, labels = images.to(device, non_blocking=True), labels.to(device)

            # –ü—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥
            with amp.autocast(enabled=cuda):
                loss = criterion(model(images), labels)

            # –û–±—Ä–∞—Ç–Ω—ã–π –ø—Ä–æ—Ö–æ–¥
            scaler.scale(loss).backward()

            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            scaler.unscale_(optimizer)
            torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=10.0)
            scaler.step(optimizer)
            scaler.update()
            optimizer.zero_grad()
            if ema:
                ema.update(model)

                # –ü—Ä–æ–≥—Ä–µ—Å—Å
                if RANK in {-1, 0}:
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–æ–π –ø–∞–º—è—Ç–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã
                    mem = '%.3gG' % (torch.cuda.memory_reserved() / 1E9 if torch.cuda.is_available() else 0)
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
                    pbar.set_description(f'{epoch + 1:>10}/{epochs:>10}{mem:>10}{loss.item():>12.3g}')

                # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                scheduler.step()

                # –í–∞–ª–∏–¥–∞—Ü–∏—è
                if RANK in {-1, 0}:
                    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å –∏ –º–µ—Ç—Ä–∏–∫ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ
                    results = validate(model=ema.ema, dataloader=testloader, criterion=criterion, pbar=pbar)
                    vloss, top1, top5 = results[:3]
                    fitness = top1  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏—Ç–Ω–µ—Å–∞ –∫–∞–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏ top1

                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                    logger.log_metrics(
                        {
                            "train/loss": tloss,
                            f"{val}/loss": vloss,
                            f"{val}/top1": top1,
                            f"{val}/top5": top5,
                            "lr/0": optimizer.param_groups[0]["lr"],
                        },
                        epoch=epoch,
                    )

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∏–ª—É—á—à–µ–≥–æ —Ñ–∏—Ç–Ω–µ—Å–∞
                    if fitness > best_fitness:
                        best_fitness = fitness

                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
                    final_epoch = epoch + 1 == epochs
                    if (not opt.nosave) or final_epoch:
                        ckpt = {
                            "epoch": epoch,
                            "best_fitness": best_fitness,
                            "model": deepcopy(ema.ema).half(),
                            "ema": None,
                            "updates": ema.updates,
                            "optimizer": optimizer.state_dict(),
                            "opt": vars(opt),
                            "git": GIT_INFO,
                        }

                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–µ–π
                        torch.save(ckpt, last)
                        if best_fitness == fitness:
                            torch.save(ckpt, best)
                        del ckpt

                # –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                if RANK in {-1, 0}:
                    LOGGER.info(f'\n–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({time.time() - t0:.3f}s)\n'
                                f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {colorstr('bold', save_dir)}\n"
                                f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:         python classify/predict.py --weights {best} --source im.jpg\n"
                                f"–í–∞–ª–∏–¥–∞—Ü–∏—è:        python classify/val.py --weights {best} --data {data}\n"
                                f"–≠–∫—Å–ø–æ—Ä—Ç:          python export.py --weights {best} --include onnx\n"
                                f"PyTorch Hub:     model = torch.hub.load('ultralytics/yolov5', 'custom', '{best}')\n"
                                f"–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:       https://netron.app\n")

                return model

                def parse_opt(known=False):
                    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                    parser = argparse.ArgumentParser()
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–æ–¥–µ–ª–∏
                    parser.add_argument('--model', type=str, default='yolov5s-cls.pt', help='–ü—É—Ç—å –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –≤–µ—Å–∞–º')
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
                    parser.add_argument('--data', type=str, default='imagenette160', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É dataset.yaml')
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ø–æ—Ö
                    parser.add_argument('--epochs', type=int, default=10, help='–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö –æ–±—É—á–µ–Ω–∏—è')
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–∫–µ—Ç–∞
                    parser.add_argument('--batch-size', type=int, default=64, help='–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö GPU')
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    parser.add_argument('--imgsz', '--img', '--img-size', type=int, default=224,
                                        help='–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–∏–∫—Å–µ–ª–∏)')
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
                    parser.add_argument('--nosave', action='store_true',
                                        help='–°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ç–æ—á–∫—É')
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    parser.add_argument('--cache', type=str, nargs='?', const='ram',
                                        help='–ö—ç—à–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ "ram" (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –∏–ª–∏ "disk"')
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    parser.add_argument('--device', default='', help='–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ CUDA, –Ω–∞–ø—Ä–∏–º–µ—Ä 0 –∏–ª–∏ 0,1,2,3 –∏–ª–∏ cpu')
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
                    parser.add_argument('--workers', type=int, default=8,
                                        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞ –∫–∞–∂–¥—ã–π RANK –≤ —Ä–µ–∂–∏–º–µ DDP)')
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
                    parser.add_argument('--project', default=ROOT / 'runs/train-cls', help='–°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ project/name')
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞
                    parser.add_argument('--name', default='exp', help='–°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ project/name')
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
                    parser.add_argument('--exist-ok', action='store_true',
                                        help='–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç/–∏–º—è –æ–∫, –Ω–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å')
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
                    parser.add_argument('--pretrained', nargs='?', const=True, default=True,
                                        help='–ù–∞—á–∏–Ω–∞—Ç—å —Å, –Ω–∞–ø—Ä–∏–º–µ—Ä --pretrained False')
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
                    parser.add_argument('--optimizer', type=str, choices=['SGD', 'Adam', 'AdamW'], default='Adam',
                                        help='–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä')
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è
                    parser.add_argument('--lr0', type=float, default=0.001, help='–ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è')
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞—Ç—É—Ö–∞–Ω–∏—è –≤–µ—Å–æ–≤
                    parser.add_argument('--decay', type=float, default=5e-5, help='–ó–∞—Ç—É—Ö–∞–Ω–∏–µ –≤–µ—Å–æ–≤')
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –º–µ—Ç–æ–∫
                    parser.add_argument('--label-smoothing', type=float, default=0.1, help='–≠–ø—Å–∏–ª–æ–Ω —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –º–µ—Ç–æ–∫')
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–Ω–¥–µ–∫—Å–∞ —Ä–∞–∑—Ä—ã–≤–∞ —Å–ª–æ—è –º–æ–¥–µ–ª–∏
                    parser.add_argument('--cutoff', type=int, default=None,
                                        help='–ò–Ω–¥–µ–∫—Å —Ä–∞–∑—Ä—ã–≤–∞ —Å–ª–æ—è –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–æ–ª–æ–≤—ã Classify()')
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥—Ä–æ–ø–∞—É—Ç–∞
                    parser.add_argument('--dropout', type=float, default=None, help='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥—Ä–æ–ø–∞—É—Ç–∞')
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                    parser.add_argument('--verbose', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º')
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å–µ–º–µ–Ω–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
                    parser.add_argument('--seed', type=int, default=0, help='–ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–µ–º—è –æ–±—É—á–µ–Ω–∏—è')
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞
                    parser.add_argument('--local_rank', type=int, default=-1,
                                        help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç DDP Multi-GPU, –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å')

                    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                    return parser.parse_known_args()[0] if known else parser.parse_args()

                def main(opt):
                    # –ü—Ä–æ–≤–µ—Ä–∫–∏
                    if RANK in {-1, 0}:
                        print_args(vars(opt))
                        check_git_status()
                        check_requirements()

                    # –†–µ–∂–∏–º DDP
                    device = select_device(opt.device, batch_size=opt.batch_size)
                    if LOC_RANK != -1:
                        assert opt.batch_size % WORLD_SIZE == 0, '--batch-size –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤ CUDA'
                        assert not opt.image_weights, '--image-weights –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å –æ–±—É—á–µ–Ω–∏–µ–º DDP'
                        dist.init_process_group(backend="nccl" if dist.is_nccl_available() else "gloo")

                    # –û–±—É—á–µ–Ω–∏–µ
                    train(opt, device)

                if __name__ == "__main__":
                    opt = parse_opt()
                    main(opt)