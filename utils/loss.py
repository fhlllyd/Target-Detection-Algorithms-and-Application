# YOLOv5 üöÄ –æ—Ç Ultralytics, –ª–∏—Ü–µ–Ω–∑–∏—è GPL-3.0
"""
–§—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å
"""

import torch
import torch.nn as nn

from utils.metrics import bbox_iou
from utils.torch_utils import de_parallel


def smooth_BCE(eps=0.1):  # https://github.com/ultralytics/yolov3/issues/238#issuecomment-598028441
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ —Å —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–∫
    return 1.0 - 0.5 * eps, 0.5 * eps


class BCEBlurWithLogitsLoss(nn.Module):
    # BCEWithLogitLoss() —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ç–æ–∫.
    def __init__(self, alpha=0.05):
        super().__init__()
        self.loss_fcn = nn.BCEWithLogitsLoss(reduction='none')  # –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å nn.BCEWithLogitsLoss()
        self.alpha = alpha

    def forward(self, pred, true):
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å
        loss = self.loss_fcn(pred, true)
        pred = torch.sigmoid(pred)  # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–∑ –ª–æ–≥–∏—Ç–æ–≤
        dx = pred - true  # —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ç–æ–∫
        alpha_factor = 1 - torch.exp((dx - 1) / (self.alpha + 1e-4))
        loss *= alpha_factor
        return loss.mean()


class FocalLoss(nn.Module):
    # –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ñ–æ–∫—É—Å–Ω–æ–π –ø–æ—Ç–µ—Ä–∏ –≤–æ–∫—Ä—É–≥ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å loss_fcn
    def __init__(self, loss_fcn, gamma=1.5, alpha=0.25):
        super().__init__()
        self.loss_fcn = loss_fcn  # –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å nn.BCEWithLogitsLoss()
        self.gamma = gamma
        self.alpha = alpha
        self.reduction = loss_fcn.reduction
        self.loss_fcn.reduction = 'none'  # –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è FL –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É

    def forward(self, pred, true):
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å
        loss = self.loss_fcn(pred, true)
        pred_prob = torch.sigmoid(pred)  # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–∑ –ª–æ–≥–∏—Ç–æ–≤
        p_t = true * pred_prob + (1 - true) * (1 - pred_prob)
        alpha_factor = true * self.alpha + (1 - true) * (1 - self.alpha)
        modulating_factor = (1.0 - p_t) ** self.gamma
        loss *= alpha_factor * modulating_factor

        if self.reduction == 'mean':
            return loss.mean()
        elif self.reduction == 'sum':
            return loss.sum()
        else:  # 'none'
            return loss


class QFocalLoss(nn.Module):
    # –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–æ–∫—É—Å–Ω–æ–π –ø–æ—Ç–µ—Ä–∏ –≤–æ–∫—Ä—É–≥ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å loss_fcn
    def __init__(self, loss_fcn, gamma=1.5, alpha=0.25):
        super().__init__()
        self.loss_fcn = loss_fcn  # –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å nn.BCEWithLogitsLoss()
        self.gamma = gamma
        self.alpha = alpha
        self.reduction = loss_fcn.reduction
        self.loss_fcn.reduction = 'none'  # –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è FL –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É

    def forward(self, pred, true):
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å
        loss = self.loss_fcn(pred, true)
        pred_prob = torch.sigmoid(pred)  # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–∑ –ª–æ–≥–∏—Ç–æ–≤
        alpha_factor = true * self.alpha + (1 - true) * (1 - self.alpha)
        modulating_factor = torch.abs(true - pred_prob) ** self.gamma
        loss *= alpha_factor * modulating_factor

        if self.reduction == 'mean':
            return loss.mean()
        elif self.reduction == 'sum':
            return loss.sum()
        else:  # 'none'
            return loss


class ComputeLoss:
    sort_obj_iou = False

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å
    def __init__(self, model, autobalance=False):
        device = next(model.parameters()).device  # –ø–æ–ª—É—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏
        h = model.hyp  # –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        BCEcls = nn.BCEWithLogitsLoss(pos_weight=torch.tensor([h['cls_pw']], device=device))
        BCEobj = nn.BCEWithLogitsLoss(pos_weight=torch.tensor([h['obj_pw']], device=device))

        # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –º–µ—Ç–æ–∫ –∫–ª–∞—Å—Å–æ–≤ https://arxiv.org/pdf/1902.04103.pdf eqn 3
        self.cp, self.cn = smooth_BCE(eps=h.get('label_smoothing', 0.0))  # —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤

        # –§–æ–∫—É—Å–Ω–∞—è –ø–æ—Ç–µ—Ä—è
        g = h['fl_gamma']  # –≥–∞–º–º–∞ –¥–ª—è —Ñ–æ–∫—É—Å–Ω–æ–π –ø–æ—Ç–µ—Ä–∏
        if g > 0:
            BCEcls, BCEobj = FocalLoss(BCEcls, g), FocalLoss(BCEobj, g)

        m = de_parallel(model).model[-1]  # –º–æ–¥—É–ª—å Detect()
        self.balance = {3: [4.0, 1.0, 0.4]}.get(m.nl, [4.0, 1.0, 0.25, 0.06, 0.02])  # –±–∞–ª–∞–Ω—Å –¥–ª—è —É—Ä–æ–≤–Ω–µ–π P3-P7
        self.ssi = list(m.stride).index(16) if autobalance else 0  # –∏–Ω–¥–µ–∫—Å –¥–ª—è —à–∞–≥–∞ 16
        self.BCEcls, self.BCEobj, self.gr, self.hyp, self.autobalance = BCEcls, BCEobj, 1.0, h, autobalance
        self.na = m.na  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∫–æ—Ä–µ–π
        self.nc = m.nc  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤
        self.nl = m.nl  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π
        self.anchors = m.anchors
        self.device = device

    def __call__(self, p, targets):  # –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        lcls = torch.zeros(1, device=self.device)  # –ø–æ—Ç–µ—Ä–∏ –∫–ª–∞—Å—Å–æ–≤
        lbox = torch.zeros(1, device=self.device)  # –ø–æ—Ç–µ—Ä–∏ bounding box
        lobj = torch.zeros(1, device=self.device)  # –ø–æ—Ç–µ—Ä–∏ –æ–±—ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
        tcls, tbox, indices, anchors = self.build_targets(p, targets)  # —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å
        for i, pi in enumerate(p):  # –∏–Ω–¥–µ–∫—Å —É—Ä–æ–≤–Ω—è, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ
            b, a, gj, gi = indices[i]  # –∏–Ω–¥–µ–∫—Å—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —è–∫–æ—Ä—è, —Å–µ—Ç–∫–∏ y, —Å–µ—Ç–∫–∏ x
            tobj = torch.zeros(pi.shape[:4], dtype=pi.dtype, device=self.device)  # —Ü–µ–ª–µ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã

            n = b.shape[0]  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            if n:
                # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –∫–ª–∞—Å—Å—ã
                pxy, pwh, _, pcls = pi[b, a, gj, gi].split((2, 2, 1, self.nc), 1)  # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –∫–ª–∞—Å—Å—ã

                # –†–µ–≥—Ä–µ—Å—Å–∏—è bounding box
                pxy = pxy.sigmoid() * 2 - 0.5
                pwh = (pwh.sigmoid() * 2) ** 2 * anchors[i]
                pbox = torch.cat((pxy, pwh), 1)  # –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π bounding box
                iou = bbox_iou(pbox, tbox[i], CIoU=True).squeeze()  # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ IoU
                lbox += (1.0 - iou).mean()  # –ø–æ—Ç–µ—Ä–∏ IoU

                # –ü–æ—Ç–µ—Ä–∏ –æ–±—ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
                iou = iou.detach().clamp(0).type(tobj.dtype)
                if self.sort_obj_iou:
                    j = iou.argsort()
                    b, a, gj, gi, iou = b[j], a[j], gj[j], gi[j], iou[j]
                if self.gr < 1:
                    iou = (1.0 - self.gr) + self.gr * iou
                tobj[b, a, gj, gi] = iou  # –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ IoU

                # –ü–æ—Ç–µ—Ä–∏ –∫–ª–∞—Å—Å–æ–≤
                if self.nc > 1:  # –µ—Å–ª–∏ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
                    t = torch.full_like(pcls, self.cn, device=self.device)  # —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    t[range(n), tcls[i]] = self.cp
                    lcls += self.BCEcls(pcls, t)  # –ø–æ—Ç–µ—Ä–∏ BCE

            obji = self.BCEobj