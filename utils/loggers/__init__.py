# YOLOv5 üöÄ by Ultralytics, GPL-3.0 license
"""
Logging utils
"""

import os
import warnings
from pathlib import Path

import pkg_resources as pkg
import torch
from torch.utils.tensorboard import SummaryWriter

from utils.general import LOGGER, colorstr, cv2
from utils.loggers.clearml.clearml_utils import ClearmlLogger
from utils.loggers.wandb.wandb_utils import WandbLogger
from utils.plots import plot_images, plot_labels, plot_results
from utils.torch_utils import de_parallel

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤ –≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–∞. –í–∫–ª—é—á–∞–µ—Ç CSV, TensorBoard, Weights & Biases, ClearML –∏ Comet.
LOGGERS = ('csv', 'tb', 'wandb', 'clearml', 'comet')  # *.csv, TensorBoard, Weights & Biases, ClearML
# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è 'RANK'. –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ -1.
RANK = int(os.getenv('RANK', -1))

try:
    # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ wandb.
    import wandb
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞, –∞ –Ω–µ –ª–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º.
    assert hasattr(wandb, '__version__')
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ wandb –∏ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–Ω–≥–∞.
    if pkg.parse_version(wandb.__version__) >= pkg.parse_version('0.12.2') and RANK in {0, -1}:
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ wandb —Å —Ç–∞–π–º–∞—É—Ç–æ–º 30 —Å–µ–∫—É–Ω–¥.
            wandb_login_success = wandb.login(timeout=30)
        except wandb.errors.UsageError:  # known non-TTY terminal issue
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç TTY.
            wandb_login_success = False
        if not wandb_login_success:
            # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º wandb –≤ None.
            wandb = None
except (ImportError, AssertionError):
    # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º wandb –≤ None.
    wandb = None

try:
    # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ clearml.
    import clearml
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞, –∞ –Ω–µ –ª–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º.
    assert hasattr(clearml, '__version__')
except (ImportError, AssertionError):
    # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º clearml –≤ None.
    clearml = None

try:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–Ω–≥–∞. –ï—Å–ª–∏ —Ä–∞–Ω–≥ –Ω–µ 0 –∏–ª–∏ -1, comet_ml –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
    if RANK not in [0, -1]:
        comet_ml = None
    else:
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ comet_ml.
        import comet_ml
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞, –∞ –Ω–µ –ª–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º.
        assert hasattr(comet_ml, '__version__')
        # –ò–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ CometLogger –∏–∑ –º–æ–¥—É–ª—è utils.loggers.comet.
        from utils.loggers.comet import CometLogger

except (ModuleNotFoundError, ImportError, AssertionError):
    # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º comet_ml –≤ None.
    comet_ml = None


class Loggers():
    # –ö–ª–∞—Å—Å Loggers –¥–ª—è YOLOv5, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ª–æ–≥–≥–µ—Ä–∞–º–∏.
    def __init__(self, save_dir=None, weights=None, opt=None, hyp=None, logger=None, include=LOGGERS):
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤.
        self.save_dir = save_dir
        # –í–µ—Å–∞ –º–æ–¥–µ–ª–∏.
        self.weights = weights
        # –û–ø—Ü–∏–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
        self.opt = opt
        # –ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏.
        self.hyp = hyp
        # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        self.plots = not opt.noplots  # plot results
        # –õ–æ–≥–≥–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å.
        self.logger = logger
        # –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤.
        self.include = include
        # –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∏ –ø–æ—Ç–µ—Ä—å.
        self.keys = [
            'train/box_loss',
            'train/obj_loss',
            'train/cls_loss',  # train loss
            'metrics/precision',
            'metrics/recall',
            'metrics/mAP_0.5',
            'metrics/mAP_0.5:0.95',  # metrics
            'val/box_loss',
            'val/obj_loss',
            'val/cls_loss',  # val loss
            'x/lr0',
            'x/lr1',
            'x/lr2']  # params
        # –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        self.best_keys = ['best/epoch', 'best/precision', 'best/recall', 'best/mAP_0.5', 'best/mAP_0.5:0.95']
        for k in LOGGERS:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞.
            setattr(self, k, None)
        # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤ CSV.
        self.csv = True

        # –°–æ–æ–±—â–µ–Ω–∏—è
        # if not wandb:
        #     prefix = colorstr('Weights & Biases: ')
        #     s = f"{prefix}run 'pip install wandb' to automatically track and visualize YOLOv5 üöÄ runs in Weights & Biases"
        #     self.logger.info(s)
        if not clearml:
            # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ ClearML.
            prefix = colorstr('ClearML: ')
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ClearML –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤.
            s = f"{prefix}run 'pip install clearml' to automatically track, visualize and remotely train YOLOv5 üöÄ in ClearML"
            # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥–≥–µ—Ä.
            self.logger.info(s)
        if not comet_ml:
            # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ Comet.
            prefix = colorstr('Comet: ')
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Comet –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤.
            s = f"{prefix}run 'pip install comet_ml' to automatically track and visualize YOLOv5 üöÄ runs in Comet"
            # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥–≥–µ—Ä.
            self.logger.info(s)
        # TensorBoard
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ TensorBoard.
        s = self.save_dir
        if 'tb' in self.include and not self.opt.evolve:
            # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ TensorBoard.
            prefix = colorstr('TensorBoard: ')
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ TensorBoard –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.
            self.logger.info(f"{prefix}Start with 'tensorboard --logdir {s.parent}', view at http://localhost:6006/")
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ SummaryWriter –¥–ª—è TensorBoard.
            self.tb = SummaryWriter(str(s))

            # W&B
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ wandb –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏ 'wandb' –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
            if wandb and 'wandb' in self.include:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä resume - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'wandb - artifact://'
                wandb_artifact_resume = isinstance(self.opt.resume, str) and self.opt.resume.startswith(
                    'wandb-artifact://')
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–ø—É—Å–∫–∞ Wandb –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä resume –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É Wandb
                run_id = torch.load(self.weights).get(
                    'wandb_id') if self.opt.resume and not wandb_artifact_resume else None
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞
                self.opt.hyp = self.hyp
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ WandbLogger
                self.wandb = WandbLogger(self.opt, run_id)
                # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –≤ –≤–µ—Ä—Å–∏–∏ Wandb –≤—ã—à–µ 0.12.10 –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
                # if pkg.parse_version(wandb.__version__) >= pkg.parse_version('0.12.11'):
                #    s = "YOLOv5 temporarily requires wandb version 0.12.10 or below. Some features may not work as expected."
                #    self.logger.warning(s)
            else:
                # –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç wandb –≤ None
                self.wandb = None

            # ClearML
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ clearml –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏ 'clearml' –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
            if clearml and 'clearml' in self.include:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ ClearmlLogger
                self.clearml = ClearmlLogger(self.opt, self.hyp)
            else:
                # –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç clearml –≤ None
                self.clearml = None

            # Comet
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ comet_ml –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏ 'comet' –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
            if comet_ml and 'comet' in self.include:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä resume - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'comet://'
                if isinstance(self.opt.resume, str) and self.opt.resume.startswith("comet://"):
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–ø—É—Å–∫–∞ Comet –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ resume
                    run_id = self.opt.resume.split("/")[-1]
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ CometLogger —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–ø—É—Å–∫–∞
                    self.comet_logger = CometLogger(self.opt, self.hyp, run_id=run_id)
                else:
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ CometLogger –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–ø—É—Å–∫–∞
                    self.comet_logger = CometLogger(self.opt, self.hyp)
            else:
                # –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç comet_logger –≤ None
                self.comet_logger = None

        @property
        def remote_dataset(self):
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            data_dict = None
            # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ClearML, –ø–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –æ—Ç ClearML
            if self.clearml:
                data_dict = self.clearml.data_dict
            # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Wandb, –ø–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –æ—Ç Wandb
            if self.wandb:
                data_dict = self.wandb.data_dict
            # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Comet, –ø–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –æ—Ç Comet
            if self.comet_logger:
                data_dict = self.comet_logger.data_dict

            return data_dict

        def on_train_start(self):
            # Callback, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π—Å—è –≤ –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è
            if self.comet_logger:
                # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ on_train_start —É –æ–±—ä–µ–∫—Ç–∞ CometLogger
                self.comet_logger.on_train_start()

        def on_pretrain_routine_start(self):
            # Callback, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π—Å—è –≤ –Ω–∞—á–∞–ª–µ –ø—Ä–µ–¥ - —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ —ç—Ç–∞–ø–∞
            if self.comet_logger:
                # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ on_pretrain_routine_start —É –æ–±—ä–µ–∫—Ç–∞ CometLogger
                self.comet_logger.on_pretrain_routine_start()

        def on_pretrain_routine_end(self, labels, names):
            # Callback, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π—Å—è –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥ - —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ —ç—Ç–∞–ø–∞
            if self.plots:
                # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –º–µ—Ç–æ–∫
                plot_labels(labels, names, self.save_dir)
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –º–µ—Ç–∫–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è
                paths = self.save_dir.glob('*labels*.jpg')
                if self.wandb:
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–µ—Ç–æ–∫ –≤ Wandb
                    self.wandb.log({"Labels": [wandb.Image(str(x), caption=x.name) for x in paths]})
                # if self.clearml:
                #    pass  # ClearML —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ö—É–∫–æ–≤
                if self.comet_logger:
                    # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ on_pretrain_routine_end —É –æ–±—ä–µ–∫—Ç–∞ CometLogger
                    self.comet_logger.on_pretrain_routine_end(paths)

        def on_train_batch_end(self, model, ni, imgs, targets, paths, vals):
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å –ª–æ–≥–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ—Ç–µ—Ä—å
            log_dict = dict(zip(self.keys[0:3], vals))
            # Callback, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π—Å—è –≤ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –æ–±—É—á–∞—é—â–µ–≥–æ –±–∞—Ç—á–∞
            # ni: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∞—Ç—á–µ–π (—Å –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è)
            if self.plots:
                if ni < 3:
                    # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞—Ç—á–∞
                    f = self.save_dir / f'train_batch{ni}.jpg'
                    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–∞—Ç—á–∞
                    plot_images(imgs, targets, paths, f)
                    if ni == 0 and self.tb and not self.opt.sync_bn:
                        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –º–æ–¥–µ–ª–∏ –≤ TensorBoard
                        log_tensorboard_graph(self.tb, model, imgsz=(self.opt.imgsz, self.opt.imgsz))
                if ni == 10 and (self.wandb or self.clearml):
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                    files = sorted(self.save_dir.glob('train*.jpg'))
                    if self.wandb:
                        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–æ–∑–∞–∏–∫ –≤ Wandb
                        self.wandb.log({'Mosaics': [wandb.Image(str(f), caption=f.name) for f in files if f.exists()]})
                    if self.clearml:
                        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤ –≤ ClearML
                        self.clearml.log_debug_samples(files, title='Mosaics')

            if self.comet_logger:
                # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ on_train_batch_end —É –æ–±—ä–µ–∫—Ç–∞ CometLogger
                self.comet_logger.on_train_batch_end(log_dict, step=ni)

        def on_train_epoch_end(self, epoch):
            # Callback, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π—Å—è –≤ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–π —ç–ø–æ—Ö–∏ –æ–±—É—á–µ–Ω–∏—è
            if self.wandb:
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π —ç–ø–æ—Ö–∏ –≤ –æ–±—ä–µ–∫—Ç–µ WandbLogger
                self.wandb.current_epoch = epoch + 1

            if self.comet_logger:
                # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ on_train_epoch_end —É –æ–±—ä–µ–∫—Ç–∞ CometLogger
                self.comet_logger.on_train_epoch_end(epoch)

        def on_val_start(self):
            # Callback, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π—Å—è –≤ –Ω–∞—á–∞–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            if self.comet_logger:
                # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ on_val_start —É –æ–±—ä–µ–∫—Ç–∞ CometLogger
                self.comet_logger.on_val_start()

        def on_val_image_end(self, pred, predn, path, names, im):
            # Callback, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π—Å—è –≤ –∫–æ–Ω—Ü–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            if self.wandb:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ Wandb
                self.wandb.val_one_image(pred, predn, path, names, im)
            if self.clearml:
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–º–∏ —Ä–∞–º–∫–∞–º–∏ –≤ ClearML
                self.clearml.log_image_with_boxes(path, pred, names, im)

    def on_val_batch_end(self, batch_i, im, targets, paths, shapes, out):
        # Callback, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π—Å—è –≤ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–∞—Ç—á–∞
        if self.comet_logger:
            # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ on_val_batch_end —É –æ–±—ä–µ–∫—Ç–∞ CometLogger
            self.comet_logger.on_val_batch_end(batch_i, im, targets, paths, shapes, out)

    def on_val_end(self, nt, tp, fp, p, r, f1, ap, ap50, ap_class, confusion_matrix):
        # Callback, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π—Å—è –≤ –∫–æ–Ω—Ü–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if self.wandb or self.clearml:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            files = sorted(self.save_dir.glob('val*.jpg'))
            if self.wandb:
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ Wandb
                self.wandb.log({"Validation": [wandb.Image(str(f), caption=f.name) for f in files]})
            if self.clearml:
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤ –≤ ClearML –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                self.clearml.log_debug_samples(files, title='Validation')

        if self.comet_logger:
            # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ on_val_end —É –æ–±—ä–µ–∫—Ç–∞ CometLogger
            self.comet_logger.on_val_end(nt, tp, fp, p, r, f1, ap, ap50, ap_class, confusion_matrix)

    def on_fit_epoch_end(self, vals, epoch, best_fitness, fi):
        # Callback, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π—Å—è –≤ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–π —ç–ø–æ—Ö–∏ —Ñ–∏—Ç–∏–Ω–≥–∞ (–æ–±—É—á–µ–Ω–∏–µ + –≤–∞–ª–∏–¥–∞—Ü–∏—è)
        x = dict(zip(self.keys, vals))
        if self.csv:
            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É results.csv –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            file = self.save_dir / 'results.csv'
            n = len(x) + 1  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            s = '' if file.exists() else (('%20s,' * n % tuple(['epoch'] + self.keys)).rstrip(',') + '\n')
            with open(file, 'a') as f:
                # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π —ç–ø–æ—Ö–µ –≤ —Ñ–∞–π–ª results.csv
                f.write(s + ('%20.5g,' * n % tuple([epoch] + vals)).rstrip(',') + '\n')

        if self.tb:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ TensorBoard –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –∫–ª—é—á - –∑–Ω–∞—á–µ–Ω–∏–µ
            for k, v in x.items():
                self.tb.add_scalar(k, v, epoch)
        elif self.clearml:  # –µ—Å–ª–∏ TensorBoard –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤ ClearML
            for k, v in x.items():
                title, series = k.split('/')
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–ª—è—Ä–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ ClearML
                self.clearml.task.get_logger().report_scalar(title, series, v, epoch)

        if self.wandb:
            if best_fitness == fi:
                # –°–±–æ—Ä –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —ç–ø–æ—Ö–∏
                best_results = [epoch] + vals[3:7]
                for i, name in enumerate(self.best_keys):
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤-summary Wandb
                    self.wandb.wandb_run.summary[name] = best_results[i]
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Wandb
            self.wandb.log(x)
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —ç–ø–æ—Ö–∏ –≤ Wandb —Å –ø–æ–º–µ—Ç–∫–æ–π –æ –ª—É—á—à–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ
            self.wandb.end_epoch(best_result=best_fitness == fi)

        if self.clearml:
            # –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —ç–ø–æ—Ö–∏ –≤ ClearML
            self.clearml.current_epoch_logged_images = set()
            # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—É—â–µ–π —ç–ø–æ—Ö–∏ –≤ ClearML
            self.clearml.current_epoch += 1

        if self.comet_logger:
            # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ on_fit_epoch_end —É –æ–±—ä–µ–∫—Ç–∞ CometLogger
            self.comet_logger.on_fit_epoch_end(x, epoch=epoch)

    def on_model_save(self, last, epoch, final_epoch, best_fitness, fi):
        # Callback, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π—Å—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏
        if (epoch + 1) % self.opt.save_period == 0 and not final_epoch and self.opt.save_period != -1:
            if self.wandb:
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –≤ Wandb
                self.wandb.log_model(last.parent, self.opt, epoch, fi, best_model=best_fitness == fi)
            if self.clearml:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã—Ö–æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏ –≤ ClearML
                self.clearml.task.update_output_model(model_path=str(last),
                                                      model_name='Latest Model',
                                                      auto_delete_file=False)

        if self.comet_logger:
            # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ on_model_save —É –æ–±—ä–µ–∫—Ç–∞ CometLogger
            self.comet_logger.on_model_save(last, epoch, final_epoch, best_fitness, fi)

    def on_train_end(self, last, best, epoch, results):
        # Callback, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π—Å—è –≤ –∫–æ–Ω—Ü–µ –æ–±—É—á–µ–Ω–∏—è, —Ç.–µ. –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
        if self.plots:
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–π–ª–∞ results.csv
            plot_results(file=self.save_dir / 'results.csv')
        files = ['results.png', 'confusion_matrix.png', *(f'{x}_curve.png' for x in ('F1', 'PR', 'P', 'R'))]
        files = [(self.save_dir / f) for f in files if (self.save_dir / f).exists()]  # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
        self.logger.info(f"Results saved to {colorstr('bold', self.save_dir)}")

        if self.tb and not self.clearml:  # –≠—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–∂–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ClearML, –Ω–µ –Ω—É–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
            for f in files:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ TensorBoard
                self.tb.add_image(f.stem, cv2.imread(str(f))[..., ::-1], epoch, dataformats='HWC')

        if self.wandb:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Wandb
            self.wandb.log(dict(zip(self.keys[3:10], results)))
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Wandb
            self.wandb.log({"Results": [wandb.Image(str(f), caption=f.name) for f in files]})
            # –í—ã–∑–æ–≤ wandb.log. TODO: –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ –≤ WandbLogger.log_model
            if not self.opt.evolve:
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –º–æ–¥–µ–ª–∏ –≤ Wandb
                wandb.log_artifact(str(best if best.exists() else last),
                                   type='model',
                                   name=f'run_{self.wandb.wandb_run.id}_model',
                                   aliases=['latest', 'best', 'stripped'])
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤ Wandb
            self.wandb.finish_run()

        if self.clearml and not self.opt.evolve:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã—Ö–æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏ –≤ ClearML –∫–∞–∫ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
            self.clearml.task.update_output_model(model_path=str(best if best.exists() else last),
                                                  name='Best Model',
                                                  auto_delete_file=False)

        if self.comet_logger:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å –∫–æ–Ω–µ—á–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π results
            final_results = dict(zip(self.keys[3:10], results))
            # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ on_train_end —É –æ–±—ä–µ–∫—Ç–∞ CometLogger —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Ñ–∞–π–ª–æ–≤, –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏, —ç–ø–æ—Ö–∏ –∏ –∫–æ–Ω–µ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.comet_logger.on_train_end(files, self.save_dir, last, best, epoch, final_results)

        def on_params_update(self, params: dict):
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
            if self.wandb:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–ø—É—Å–∫–∞ Wandb —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, —Ä–∞–∑—Ä–µ—à–∞—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
                self.wandb.wandb_run.config.update(params, allow_val_change=True)
            if self.comet_logger:
                # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ on_params_update —É –æ–±—ä–µ–∫—Ç–∞ CometLogger –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                self.comet_logger.on_params_update(params)

        class GenericLogger:
            """
            YOLOv5 –û–±—â–∏–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –ª–æ–≥–æ–≤ –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ
            –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: from utils.loggers import GenericLogger; logger = GenericLogger(...)
            –ê—Ä–≥—É–º–µ–Ω—Ç—ã
                opt:             –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞
                console_logger:  –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
                include:         –õ–æ–≥–≥–µ—Ä—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
            """

            def __init__(self, opt, console_logger, include=('tb', 'wandb')):
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
                self.save_dir = Path(opt.save_dir)
                self.include = include
                self.console_logger = console_logger
                self.csv = self.save_dir / 'results.csv'  # CSV –ª–æ–≥–≥–µ—Ä
                if 'tb' in self.include:
                    # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ TensorBoard
                    prefix = colorstr('TensorBoard: ')
                    # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –æ —Ç–æ–º, –∫–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å TensorBoard –∏ –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                    self.console_logger.info(
                        f"{prefix}Start with 'tensorboard --logdir {self.save_dir.parent}', view at http://localhost:6006/")
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ SummaryWriter –¥–ª—è TensorBoard —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    self.tb = SummaryWriter(str(self.save_dir))

                if wandb and 'wandb' in self.include:
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Wandb —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞, –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ –Ω–µ "exp") –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    self.wandb = wandb.init(project=web_project_name(str(opt.project)),
                                            name=None if opt.name == "exp" else opt.name,
                                            config=opt)
                else:
                    # –ï—Å–ª–∏ Wandb –Ω–µ –≤–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç wandb –≤ None
                    self.wandb = None

            def log_metrics(self, metrics, epoch):
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –º–µ—Ç—Ä–∏–∫ –≤–æ –≤—Å–µ –ª–æ–≥–≥–µ—Ä—ã
                if self.csv:
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Å–ª–æ–≤–∞—Ä—è –º–µ—Ç—Ä–∏–∫
                    keys, vals = list(metrics.keys()), list(metrics.values())
                    n = len(metrics) + 1  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
                    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ CSV, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    s = '' if self.csv.exists() else (('%23s,' * n % tuple(['epoch'] + keys)).rstrip(',') + '\n')
                    with open(self.csv, 'a') as f:
                        # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ —ç–ø–æ—Ö–µ –∏ –º–µ—Ç—Ä–∏–∫–∞—Ö –≤ —Ñ–∞–π–ª CSV
                        f.write(s + ('%23.5g,' * n % tuple([epoch] + vals)).rstrip(',') + '\n')

                if self.tb:
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç—Ä–∏–∫–∏ –≤ TensorBoard
                    for k, v in metrics.items():
                        self.tb.add_scalar(k, v, epoch)

                if self.wandb:
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ Wandb —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —à–∞–≥–∞ (—ç–ø–æ—Ö–∏)
                    self.wandb.log(metrics, step=epoch)

            def log_images(self, files, name='Images', epoch=0):
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–æ –≤—Å–µ –ª–æ–≥–≥–µ—Ä—ã
                files = [Path(f) for f in
                         (files if isinstance(files, (tuple, list)) else [files])]  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ Path
                files = [f for f in files if f.exists()]  # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤

                if self.tb:
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ TensorBoard
                    for f in files:
                        self.tb.add_image(f.stem, cv2.imread(str(f))[..., ::-1], epoch, dataformats='HWC')

                if self.wandb:
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ Wandb —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —à–∞–≥–∞ (—ç–ø–æ—Ö–∏) –∏ –∏–º–µ–Ω–∏ –Ω–∞–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    self.wandb.log({name: [wandb.Image(str(f), caption=f.name) for f in files]}, step=epoch)

            def log_graph(self, model, imgsz=(640, 640)):
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –º–æ–¥–µ–ª–∏ –≤–æ –≤—Å–µ –ª–æ–≥–≥–µ—Ä—ã
                if self.tb:
                    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∞ –º–æ–¥–µ–ª–∏ –≤ TensorBoard
                    log_tensorboard_graph(self.tb, model, imgsz)

            def log_model(self, model_path, epoch=0, metadata={}):
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤–æ –≤—Å–µ –ª–æ–≥–≥–µ—Ä—ã
                if self.wandb:
                    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ Wandb –¥–ª—è –º–æ–¥–µ–ª–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏–º–µ–Ω–∏, —Ç–∏–ø–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                    art = wandb.Artifact(name=f"run_{wandb.run.id}_model", type="model", metadata=metadata)
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏ –≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
                    art.add_file(str(model_path))
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –º–æ–¥–µ–ª–∏ –≤ Wandb
                    wandb.log_artifact(art)

            def update_params(self, params):
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω—ã
                if self.wandb:
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–ø—É—Å–∫–∞ Wandb —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, —Ä–∞–∑—Ä–µ—à–∞—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
                    wandb.run.config.update(params, allow_val_change=True)

        def log_tensorboard_graph(tb, model, imgsz=(640, 640)):
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –º–æ–¥–µ–ª–∏ –≤ TensorBoard
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ —Ç–∏–ø–∞
                p = next(model.parameters())
                imgsz = (imgsz, imgsz) if isinstance(imgsz, int) else imgsz  # —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
                # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –Ω—É–ª—è–º–∏)
                im = torch.zeros((1, 3, *imgsz)).to(p.device).type_as(p)
                with warnings.catch_warnings():
                    warnings.simplefilter('ignore')  # –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–µ JIT
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –º–æ–¥–µ–ª–∏ –≤ TensorBoard —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ JIT
                    tb.add_graph(torch.jit.trace(de_parallel(model), im, strict=False), [])
            except Exception as e:
                # –í—ã–≤–æ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ LOGGER –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞ –≤ TensorBoard
                LOGGER.warning(f'WARNING ‚ö†Ô∏è TensorBoard graph visualization failure {e}')

        def web_project_name(project):
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –≤–µ–± - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            if not project.startswith('runs/train'):
                return project
            suffix = '-Classify' if project.endswith('-cls') else '-Segment' if project.endswith('-seg') else ''
            return f'YOLOv5{suffix}'