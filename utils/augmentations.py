# YOLOv5 üöÄ by Ultralytics, GPL-3.0 license
"""
Image augmentation functions
"""

import math
import random

import cv2
import numpy as np
import torch
import torchvision.transforms as T
import torchvision.transforms.functional as TF

from utils.general import LOGGER, check_version, colorstr, resample_segments, segment2box, xywhn2xyxy
from utils.metrics import bbox_ioa

# –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–∞–Ω–∞–ª–∞–º RGB –¥–ª—è ImageNet
IMAGENET_MEAN = 0.485, 0.456, 0.406
# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ –∫–∞–Ω–∞–ª–∞–º RGB –¥–ª—è ImageNet
IMAGENET_STD = 0.229, 0.224, 0.225


class Albumentations:
    # –ö–ª–∞—Å—Å Albumentations –¥–ª—è YOLOv5 (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∞–∫–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    def __init__(self, size=640):
        self.transform = None
        # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        prefix = colorstr('albumentations: ')
        try:
            import albumentations as A
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Albumentations
            check_version(A.__version__, '1.0.3', hard=True)

            # –°–ø–∏—Å–æ–∫ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π
            T = [
                # –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏ –æ–±—Ä–µ–∑–∫–∞
                A.RandomResizedCrop(height=size, width=size, scale=(0.8, 1.0), ratio=(0.9, 1.11), p=0.0),
                # –†–∞–∑–º—ã—Ç–∏–µ
                A.Blur(p=0.01),
                # –ú–µ–¥–∏–∞–Ω–Ω–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ
                A.MedianBlur(p=0.01),
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
                A.ToGray(p=0.01),
                # –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
                A.CLAHE(p=0.01),
                # –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
                A.RandomBrightnessContrast(p=0.0),
                # –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥–∞–º–º—ã
                A.RandomGamma(p=0.0),
                # –°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                A.ImageCompression(quality_lower=75, p=0.0)
            ]
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            self.transform = A.Compose(T, bbox_params=A.BboxParams(format='yolo', label_fields=['class_labels']))

            # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π
            LOGGER.info(prefix + ', '.join(f'{x}'.replace('always_apply=False, ', '') for x in T if x.p))
        except ImportError:
            # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –ø–∞–∫–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            pass
        except Exception as e:
            LOGGER.info(f'{prefix}{e}')

    def __call__(self, im, labels, p=1.0):
        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ p
        if self.transform and random.random() < p:
            new = self.transform(image=im, bboxes=labels[:, 1:], class_labels=labels[:, 0])
            im = new['image']
            labels = np.array([[c, *b] for c, b in zip(new['class_labels'], new['bboxes'])])
        return im, labels


def normalize(x, mean=IMAGENET_MEAN, std=IMAGENET_STD, inplace=False):
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è RGB-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π x –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–º ImageNet –≤ —Ñ–æ—Ä–º–∞—Ç–µ BCHW
    return TF.normalize(x, mean, std, inplace=inplace)


def denormalize(x, mean=IMAGENET_MEAN, std=IMAGENET_STD):
    # –î–µ-–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è RGB-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π x –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–º ImageNet –≤ —Ñ–æ—Ä–º–∞—Ç–µ BCHW
    for i in range(3):
        x[:, i] = x[:, i] * std[i] + mean[i]
    return x


def augment_hsv(im, hgain=0.5, sgain=0.5, vgain=0.5):
    # –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –≤ —Ü–≤–µ—Ç–æ–≤–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ HSV
    if hgain or sgain or vgain:
        # –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
        r = np.random.uniform(-1, 1, 3) * [hgain, sgain, vgain] + 1
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ü–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ HSV
        hue, sat, val = cv2.split(cv2.cvtColor(im, cv2.COLOR_BGR2HSV))
        dtype = im.dtype

        x = np.arange(0, 256, dtype=r.dtype)
        # –¢–∞–±–ª–∏—Ü—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        lut_hue = ((x * r[0]) % 180).astype(dtype)
        lut_sat = np.clip(x * r[1], 0, 255).astype(dtype)
        lut_val = np.clip(x * r[2], 0, 255).astype(dtype)

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ BGR
        im_hsv = cv2.merge((cv2.LUT(hue, lut_hue), cv2.LUT(sat, lut_sat), cv2.LUT(val, lut_val)))
        cv2.cvtColor(im_hsv, cv2.COLOR_HSV2BGR, dst=im)


def hist_equalize(im, clahe=True, bgr=False):
    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –Ω–∞ BGR-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ 'im'
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ü–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ YUV
    yuv = cv2.cvtColor(im, cv2.COLOR_BGR2YUV if bgr else cv2.COLOR_RGB2YUV)
    if clahe:
        # –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
        c = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
        yuv[:, :, 0] = c.apply(yuv[:, :, 0])
    else:
        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –ø–æ –∫–∞–Ω–∞–ª—É Y
        yuv[:, :, 0] = cv2.equalizeHist(yuv[:, :, 0])
    # –û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ RGB –∏–ª–∏ BGR
    return cv2.cvtColor(yuv, cv2.COLOR_YUV2BGR if bgr else cv2.COLOR_YUV2RGB)


def replicate(im, labels):
    # –†–µ–ø–ª–∏–∫–∞—Ü–∏—è –º–µ—Ç–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    h, w = im.shape[:2]
    boxes = labels[:, 1:].astype(int)
    x1, y1, x2, y2 = boxes.T
    # –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞ bounding box
    s = ((x2 - x1) + (y2 - y1)) / 2
    for i in s.argsort()[:round(s.size * 0.5)]:
        x1b, y1b, x2b, y2b = boxes[i]
        bh, bw = y2b - y1b, x2b - x1b
        # –°–ª—É—á–∞–π–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
        yc, xc = int(random.uniform(0, h - bh)), int(random.uniform(0, w - bw))
        x1a, y1a, x2a, y2a = [xc, yc, xc + bw, yc + bh]
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        im[y1a:y2a, x1a:x2a] = im[y1b:y2b, x1b:x2b]
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–µ—Ç–∫–∏
        labels = np.append(labels, [[labels[i, 0], x1a, y1a, x2a, y2a]], axis=0)

    return im, labels


def letterbox(im, new_shape=(640, 640), color=(114, 114, 114), auto=True, scaleFill=False, scaleup=True, stride=32):
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —à–∞–≥–∞
    shape = im.shape[:2]
    if isinstance(new_shape, int):
        new_shape = (new_shape, new_shape)

    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    r = min(new_shape[0] / shape[0], new_shape[1] / shape[1])
    if not scaleup:
        r = min(r, 1.0)

    ratio = r, r
    # –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –±–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    new_unpad = int(round(shape[1] * r)), int(round(shape[0] * r))
    # –í–µ–ª–∏—á–∏–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ —à–∏—Ä–∏–Ω–µ –∏ –≤—ã—Å–æ—Ç–µ
    dw, dh = new_shape[1] - new_unpad[0], new_shape[0] - new_unpad[1]
    if auto:
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        dw, dh = np.mod(dw, stride), np.mod(dh, stride)
    elif scaleFill:
        # –†–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–µ
        dw, dh = 0.0, 0.0
        new_unpad = (new_shape[1], new_shape[0])
        ratio = new_shape[1] / shape[1], new_shape[0] / shape[0]

    dw /= 2
    dh /= 2

    if shape[::-1] != new_unpad:
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        im = cv2.resize(im, new_unpad, interpolation=cv2.INTER_LINEAR)
    top, bottom = int(round(dh - 0.1)), int(round(dh + 0.1))
    left, right = int(round(dw - 0.1)), int(round(dw + 0.1))
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü
    im = cv2.copyMakeBorder(im, top, bottom, left, right, cv2.BORDER_CONSTANT, value=color)
    return im, ratio, (dw, dh)


def random_perspective(im,
                       targets=(),
                       segments=(),
                       degrees=10,
                       translate=.1,
                       scale=.1,
                       shear=10,
                       perspective=0.0,
                       border=(0, 0)):
    # –°–ª—É—á–∞–π–Ω–∞—è –∞—Ñ–∏–Ω–Ω–∞—è –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    height = im.shape[0] + border[0] * 2
    width = im.shape[1] + border[1] * 2

    # –ú–∞—Ç—Ä–∏—Ü–∞ —Å–¥–≤–∏–≥–∞ –≤ —Ü–µ–Ω—Ç—Ä
    C = np.eye(3)
    C[0, 2] = -im.shape[1] / 2
    C[1, 2] = -im.shape[0] / 2

    # –ú–∞—Ç—Ä–∏—Ü–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã
    P = np.eye(3)
    P[2, 0] = random.uniform(-perspective, perspective)
    P[2, 1] = random.uniform(-perspective, perspective)

    # –ú–∞—Ç—Ä–∏—Ü–∞ –≤—Ä–∞—â–µ–Ω–∏—è –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    R = np.eye(3)
    a = random.uniform(-degrees, degrees)
    s = random.uniform(1 - scale, 1 + scale)
    R[:2] = cv2.getRotationMatrix2D(angle=a, center=(0, 0), scale=s)

    # –ú–∞—Ç—Ä–∏—Ü–∞ —Å–¥–≤–∏–≥–∞
    S = np.eye(3)
    S[0, 1] = math.tan(random.uniform(-shear, shear) * math.pi / 180)
    S[1, 0] = math.tan(random.uniform(-shear, shear) * math.pi / 180)

    # –ú–∞—Ç—Ä–∏—Ü–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
    T = np.eye(3)
    T[0, 2] = random.uniform(0.5 - translate, 0.5 + translate) * width
    T[1, 2] = random.uniform(0.5 - translate, 0.5 + translate) * height

    # –û–±—â–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    M = T @ S @ R @ P @ C
    if (border[0] != 0) or (border[1] != 0) or (M != np.eye(3)).any():
        if perspective:
            # –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            im = cv2.warpPerspective(im, M, dsize=(width, height), borderValue=(114, 114, 114))
        else:
            # –ê—Ñ—Ñ–∏–Ω–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            im = cv2.warpAffine(im, M[:2], dsize=(width, height), borderValue=(114, 114, 114))

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–µ—Ç–æ–∫
        n = len(targets)
        if n:
            use_segments = any(x.any() for x in segments)
            new = np.zeros((n, 4))
            if use_segments:  # –êÌïÄ–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                segments = resample_segments(segments)  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µÂèñÊ†∑Áéá
                for i, segment in enumerate(segments):
                    xy = np.ones((len(segment), 3))
                    xy[:, :2] = segment
                    xy = xy @ M.T  # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
                    xy = xy[:, :2] / xy[:, 2:3] if perspective else xy[:,
                                                                    :2]  # –ü—Ä–µ—Å–µ–∫–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –∏–ª–∏ –∞—Ñ—Ñ–∏–Ω–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ

                    # –û–±—Ä–µ–∑–∫–∞
                    new[i] = segment2box(xy, width, height)

            else:  # –êÌïÄ–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ bounding box
                xy = np.ones((n * 4, 3))
                xy[:, :2] = targets[:, [1, 2, 3, 4, 1, 4, 3, 2]].reshape(n * 4, 2)  # x1y1, x2y2, x1y2, x2y1
                xy = xy @ M.T  # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
                xy = (xy[:, :2] / xy[:, 2:3] if perspective else xy[:, :2]).reshape(n,
                                                                                    8)  # –ü—Ä–µ—Å–µ–∫–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –∏–ª–∏ –∞—Ñ—Ñ–∏–Ω–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ

                # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö bounding box
                x = xy[:, [0, 2, 4, 6]]
                y = xy[:, [1, 3, 5, 7]]
                new = np.concatenate((x.min(1), y.min(1), x.max(1), y.max(1))).reshape(4, n).T

                # –û–±—Ä–µ–∑–∫–∞
                new[:, [0, 2]] = new[:, [0, 2]].clip(0, width)
                new[:, [1, 3]] = new[:, [1, 3]].clip(0, height)

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            i = box_candidates(box1=targets[:, 1:5].T * s, box2=new.T, area_thr=0.01 if use_segments else 0.10)
            targets = targets[i]
            targets[:, 1:5] = new[i]

        return im, targets

    def copy_paste(im, labels, segments, p=0.5):
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ Copy-Paste https://arxiv.org/abs/2012.07177, –º–µ—Ç–∫–∏ –≤ –≤–∏–¥–µ nx5 –º–∞—Å—Å–∏–≤–∞ np.array(cls, xyxy)
        n = len(segments)
        if p and n:
            h, w, c = im.shape  # –í—ã—Å–æ—Ç–∞, —à–∏—Ä–∏–Ω–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
            im_new = np.zeros(im.shape, np.uint8)
            for j in random.sample(range(n), k=round(p * n)):
                l, s = labels[j], segments[j]
                box = w - l[3], l[2], w - l[1], l[4]
                ioa = bbox_ioa(box, labels[:, 1:5])  # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ –ø–ª–æ—â–∞–¥–∏
                if (ioa < 0.30).all():  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ 30% –∑–∞—Å–ª–æ–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ç–æ–∫
                    labels = np.concatenate((labels, [[l[0], *box]]), 0)
                    segments.append(np.concatenate((w - s[:, 0:1], s[:, 1:2]), 1))
                    cv2.drawContours(im_new, [segments[j].astype(np.int32)], -1, (1, 1, 1), cv2.FILLED)

            result = cv2.flip(im, 1)  # –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (–æ—Ç—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ)
            i = cv2.flip(im_new, 1).astype(bool)
            im[i] = result[i]  # cv2.imwrite('debug.jpg', im)  # –û—Ç–ª–∞–¥–∫–∞

        return im, labels, segments

    def cutout(im, labels, p=0.5):
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ cutout –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è https://arxiv.org/abs/1708.04552
        if random.random() < p:
            h, w = im.shape[:2]
            scales = [0.5] * 1 + [0.25] * 2 + [0.125] * 4 + [0.0625] * 8 + [0.03125] * 16  # –î–æ–ª—è —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for s in scales:
                mask_h = random.randint(1, int(h * s))  # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –º–∞—Å–æ–∫
                mask_w = random.randint(1, int(w * s))

                # Box
                xmin = max(0, random.randint(0, w) - mask_w // 2)
                ymin = max(0, random.randint(0, h) - mask_h // 2)
                xmax = min(w, xmin + mask_w)
                ymax = min(h, ymin + mask_h)

                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Å–∫–∏
                im[ymin:ymax, xmin:xmax] = [random.randint(64, 191) for _ in range(3)]

                # –í–æ–∑–≤—Ä–∞—Ç –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –º–µ—Ç–æ–∫
                if len(labels) and s > 0.03:
                    box = np.array([xmin, ymin, xmax, ymax], dtype=np.float32)
                    ioa = bbox_ioa(box, xywhn2xyxy(labels[:, 1:5], w, h))  # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ –ø–ª–æ—â–∞–¥–∏
                    labels = labels[ioa < 0.60]  # –£–¥–∞–ª–∏—Ç—å –º–µ—Ç–∫–∏, –∑–∞—Å–ª–æ–µ–Ω–Ω—ã–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 60%

        return labels

    def mixup(im, labels, im2, labels2):
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ MixUp https://arxiv.org/pdf/1710.09412.pdf
        r = np.random.beta(32.0, 32.0)  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç mixup, alpha=beta=32.0
        im = (im * r + im2 * (1 - r)).astype(np.uint8)
        labels = np.concatenate((labels, labels2), 0)
        return im, labels

    def box_candidates(box1, box2, wh_thr=2, ar_thr=100, area_thr=0.1, eps=1e-16):  # box1(4,n), box2(4,n)
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è bounding box: box1 –¥–æ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏, box2 –ø–æ—Å–ª–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏, wh_thr (–ø–∏–∫—Å–µ–ª–∏), —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω, –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–µ–π
        w1, h1 = box1[2] - box1[0], box1[3] - box1[1]
        w2, h2 = box2[2] - box2[0], box2[3] - box2[1]
        ar = np.maximum(w2 / (h2 + eps), h2 / (w2 + eps))  # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
        return (w2 > wh_thr) & (h2 > wh_thr) & (w2 * h2 / (w1 * h1 + eps) > area_thr) & (ar < ar_thr)  # –ö–∞–Ω–¥–∏–¥–∞—Ç—ã

    def classify_albumentations(
            augment=True,
            size=224,
            scale=(0.08, 1.0),
            ratio=(0.75, 1.0 / 0.75),  # 0.75, 1.33
            hflip=0.5,
            vflip=0.0,
            jitter=0.4,
            mean=IMAGENET_MEAN,
            std=IMAGENET_STD,
            auto_aug=False):
        # Albumentations –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ YOLOv5 (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∞–∫–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
        prefix = colorstr('albumentations: ')
        try:
            import albumentations as A
            from albumentations.pytorch import ToTensorV2
            check_version(A.__version__, '1.0.3', hard=True)  # –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –≤–µ—Ä—Å–∏–∏
            if augment:  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏ –æ–±—Ä–µ–∑–∫–∞
                T = [A.RandomResizedCrop(height=size, width=size, scale=scale, ratio=ratio)]
                if auto_aug:
                    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å AugMix, AutoAug & RandAug –≤ albumentation
                    LOGGER.info(f'{prefix}–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è')
                else:
                    if hflip > 0:
                        T += [A.HorizontalFlip(p=hflip)]
                    if vflip > 0:
                        T += [A.VerticalFlip(p=vflip)]
                    if jitter > 0:
                        color_jitter = (float(
                            jitter),) * 3  # –ü–æ–≤—Ç–æ—Ä –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —è—Ä–∫–æ—Å—Ç–∏, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞, –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏, 0 –æ—Ç—Ç–µ–Ω–æ–∫
                        T += [A.ColorJitter(*color_jitter, 0)]
            else:  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–µ–∑–∫–∞ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏ (—Ä–µ–ø—Ä–æ–¥—É—Ü–∏—Ä—É–µ–º–æ—Å—Ç—å)
                T = [A.SmallestMaxSize(max_size=size), A.CenterCrop(height=size, width=size)]
            T += [A.Normalize(mean=mean, std=std), ToTensorV2()]  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ Tensor
            LOGGER.info(prefix + ', '.join(f'{x}'.replace('always_apply=False, ', '') for x in T if x.p))
            return A.Compose(T)

        except ImportError:  # –ü–∞–∫–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
            LOGGER.warning(f'{prefix}‚ö†Ô∏è –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å –ø–æ–º–æ—â—å—é `pip install albumentations` (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)')
        except Exception as e:
            LOGGER.info(f'{prefix}{e}')

    def classify_transforms(size=224):
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ albumentations –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        assert isinstance(size,
                          int), f'ERROR: classify_transforms size {size} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, –∞ –Ω–µ (list, tuple)'
        # T.Compose([T.ToTensor(), T.Resize(size), T.CenterCrop(size), T.Normalize(IMAGENET_MEAN, IMAGENET_STD)])
        return T.Compose([CenterCrop(size), ToTensor(), T.Normalize(IMAGENET_MEAN, IMAGENET_STD)])

    class LetterBox:
        # –ö–ª–∞—Å—Å LetterBox –¥–ª—è YOLOv5 –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Ç.–µ. T.Compose([LetterBox(size), ToTensor()])
        def __init__(self, size=(640, 640), auto=False, stride=32):
            super().__init__()
            self.h, self.w = (size, size) if isinstance(size, int) else size
            self.auto = auto  # –ü–µ—Ä–µ–¥–∞—Ç—å —Ü–µ–ª–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—á–∏—Å–ª–∏—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∞–≥–∞
            self.stride = stride  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å auto

        def __call__(self, im):  # im = np.array HWC
            imh, imw = im.shape[:2]
            r = min(self.h / imh, self.w / imw)  # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ/—Å—Ç–∞—Ä–∞–≥–æ
            h, w = round(imh * r), round(imw * r)  # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            hs, ws = (math.ceil(x / self.stride) * self.stride for x in (h, w)) if self.auto else self.h, self.w
            top, left = round((hs - h) / 2 - 0.1), round((ws - w) / 2 - 0.1)
            im_out = np.full((self.h, self.w, 3), 114, dtype=im.dtype)
            im_out[top:top + h, left:left + w] = cv2.resize(im, (w, h), interpolation=cv2.INTER_LINEAR)
            return im_out

    class CenterCrop:
        # –ö–ª–∞—Å—Å CenterCrop –¥–ª—è YOLOv5 –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Ç.–µ. T.Compose([CenterCrop(size), ToTensor()])
        def __init__(self, size=640):
            super().__init__()
            self.h, self.w = (size, size) if isinstance(size, int) else size

        def __call__(self, im):  # im = np.array HWC
            imh, imw = im.shape[:2]
            m = min(imh, imw)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
            top, left = (imh - m) // 2, (imw - m) // 2
            return cv2.resize(im[top:top + m, left:left + m], (self.w, self.h), interpolation=cv2.INTER_LINEAR)

    class ToTensor:
        # –ö–ª–∞—Å—Å ToTensor –¥–ª—è YOLOv5 –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Ç.–µ. T.Compose([LetterBox(size), ToTensor()])
        def __init__(self, half=False):
            super().__init__()
            self.half = half

        def __call__(self, im):  # im = np.array HWC –≤ –ø–æ—Ä—è–¥–∫–µ BGR
            im = np.ascontiguousarray(im.transpose((2, 0, 1))[::-1])  # HWC –≤ CHW -> BGR –≤ RGB -> –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π
            im = torch.from_numpy(im)  # –≤ torch
            im = im.half() if self.half else im.float()  # uint8 –≤ fp16/32
            im /= 255.0  # 0-255 –≤ 0.0-1.0
            return im