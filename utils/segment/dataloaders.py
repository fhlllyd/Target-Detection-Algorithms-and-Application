# YOLOv5 üöÄ by Ultralytics, GPL-3.0 license
"""
Dataloaders
"""

import os
import random

import cv2
import numpy as np
import torch
from torch.utils.data import DataLoader, distributed

from ..augmentations import augment_hsv, copy_paste, letterbox
from ..dataloaders import InfiniteDataLoader, LoadImagesAndLabels, seed_worker
from ..general import LOGGER, xyn2xy, xywhn2xyxy, xyxy2xywhn
from ..torch_utils import torch_distributed_zero_first
from .augmentations import mixup, random_perspective

# –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è 'RANK'. –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ -1
RANK = int(os.getenv('RANK', -1))

def create_dataloader(path,
                      imgsz,
                      batch_size,
                      stride,
                      single_cls=False,
                      hyp=None,
                      augment=False,
                      cache=False,
                      pad=0.0,
                      rect=False,
                      rank=-1,
                      workers=8,
                      image_weights=False,
                      quad=False,
                      prefix='',
                      shuffle=False,
                      mask_downsample_ratio=1,
                      overlap_mask=False):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –æ–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ rect –∏ shuffle
    if rect and shuffle:
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã rect –∏ shuffle –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã, –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º shuffle –≤ False
        LOGGER.warning('WARNING ‚ö†Ô∏è --rect is incompatible with DataLoader shuffle, setting shuffle=False')
        shuffle = False
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à –¥–∞—Ç–∞—Å–µ—Ç–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (DDP)
    with torch_distributed_zero_first(rank):
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ LoadImagesAndLabelsAndMasks –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –º–µ—Ç–æ–∫ –∏ –º–∞—Å–æ–∫
        dataset = LoadImagesAndLabelsAndMasks(
            path,
            imgsz,
            batch_size,
            augment=augment,  # –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è
            hyp=hyp,  # –ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            rect=rect,  # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ –±–∞—Ç—á–∏
            cache_images=cache,
            single_cls=single_cls,
            stride=int(stride),
            pad=pad,
            image_weights=image_weights,
            prefix=prefix,
            downsample_ratio=mask_downsample_ratio,
            overlap=overlap_mask)

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ
    batch_size = min(batch_size, len(dataset))
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö CUDA-—É—Å—Ç—Ä–æ–π—Å—Ç–≤
    nd = torch.cuda.device_count()
    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    nw = min([os.cpu_count() // max(nd, 1), batch_size if batch_size > 1 else 0, workers])
    # –°–æ–∑–¥–∞–µ–º —Å–µ–º–ø–ª–µ—Ä –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –µ—Å–ª–∏ —Ä–∞–Ω–≥ –Ω–µ —Ä–∞–≤–µ–Ω -1
    sampler = None if rank == -1 else distributed.DistributedSampler(dataset, shuffle=shuffle)
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–µ—Å–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    loader = DataLoader if image_weights else InfiniteDataLoader
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    generator = torch.Generator()
    generator.manual_seed(6148914691236517205 + RANK)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–∞—Ç–∞—Å–µ—Ç
    return loader(
        dataset,
        batch_size=batch_size,
        shuffle=shuffle and sampler is None,
        num_workers=nw,
        sampler=sampler,
        pin_memory=True,
        collate_fn=LoadImagesAndLabelsAndMasks.collate_fn4 if quad else LoadImagesAndLabelsAndMasks.collate_fn,
        worker_init_fn=seed_worker,
        generator=generator,
    ), dataset


class LoadImagesAndLabelsAndMasks(LoadImagesAndLabels):  # –î–ª—è –æ–±—É—á–µ–Ω–∏—è/—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    def __init__(
        self,
        path,
        img_size=640,
        batch_size=16,
        augment=False,
        hyp=None,
        rect=False,
        image_weights=False,
        cache_images=False,
        single_cls=False,
        stride=32,
        pad=0,
        min_items=0,
        prefix="",
        downsample_ratio=1,
        overlap=False,
    ):
        # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞
        super().__init__(path, img_size, batch_size, augment, hyp, rect, image_weights, cache_images, single_cls,
                         stride, pad, min_items, prefix)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–º–µ–Ω—å—à–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞ –º–∞—Å–∫–∏
        self.downsample_ratio = downsample_ratio
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –º–∞—Å–æ–∫
        self.overlap = overlap

    def __getitem__(self, index):
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π (–ª–∏–Ω–µ–π–Ω–∞—è, –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω–∞—è –∏–ª–∏ –ø–æ –≤–µ—Å–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
        index = self.indices[index]

        # –ü–æ–ª—É—á–∞–µ–º –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        hyp = self.hyp
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∑–∞–∏–∫—É –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
        mosaic = self.mosaic and random.random() < hyp['mosaic']
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Å–æ–∫
        masks = []
        if mosaic:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–æ–∑–∞–∏–∫–∏
            img, labels, segments = self.load_mosaic(index)
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ä–º–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            shapes = None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—é MixUp –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
            if random.random() < hyp["mixup"]:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—é MixUp
                img, labels, segments = mixup(img, labels, segments, *self.load_mosaic(random.randint(0, self.n - 1)))

        else:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img, (h0, w0), (h, w) = self.load_image(index)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º letterbox –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            shape = self.batch_shapes[self.batch[index]] if self.rect else self.img_size
            img, ratio, pad = letterbox(img, shape, auto=False, scaleup=self.augment)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ –∏ –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            shapes = (h0, w0), ((h / h0, w / w0), pad)

            # –ö–æ–ø–∏—Ä—É–µ–º –º–µ—Ç–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            labels = self.labels[index].copy()
            # –ö–æ–ø–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            segments = self.segments[index].copy()
            if len(segments):
                for i_s in range(len(segments)):
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    segments[i_s] = xyn2xy(
                        segments[i_s],
                        ratio[0] * w,
                        ratio[1] * h,
                        padw=pad[0],
                        padh=pad[1],
                    )
            if labels.size:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã bounding box-–æ–≤ –≤ –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                labels[:, 1:] = xywhn2xyxy(labels[:, 1:], ratio[0] * w, ratio[1] * h, padw=pad[0], padh=pad[1])

            if self.augment:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—É—é –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—é –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, –º–µ—Ç–∫–∞–º –∏ —Å–µ–≥–º–µ–Ω—Ç–∞–º
                img, labels, segments = random_perspective(img,
                                                           labels,
                                                           segments=segments,
                                                           degrees=hyp["degrees"],
                                                           translate=hyp["translate"],
                                                           scale=hyp["scale"],
                                                           shear=hyp["shear"],
                                                           perspective=hyp["perspective"])

        # nl = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–∫
        nl = len(labels)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –º–µ—Ç–∫–∏
        if nl:
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ xyxy –≤ xywhn –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
            labels[:, 1:5] = xyxy2xywhn(labels[:, 1:5], w=img.shape[1], h=img.shape[0], clip=True, eps=1e-3)
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ
            if self.overlap:
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –≤ –º–∞—Å–∫–∏ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
                masks, sorted_idx = polygons2masks_overlap(img.shape[:2],
                                                           segments,
                                                           downsample_ratio=self.downsample_ratio)
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫ –º–∞—Å–∫–∞–º
                masks = masks[None]  # (640, 640) -> (1, 640, 640)
                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–µ—Ç–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏
                labels = labels[sorted_idx]
            else:
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –≤ –º–∞—Å–∫–∏ –±–µ–∑ —É—á–µ—Ç–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
                masks = polygons2masks(img.shape[:2], segments, color=1, downsample_ratio=self.downsample_ratio)

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –º–∞—Å–∫ –≤ —Ç–µ–Ω–∑–æ—Ä PyTorch –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Ç–µ–Ω–∑–æ—Ä–∞
        masks = (torch.from_numpy(masks) if len(masks) else torch.zeros(1 if self.overlap else nl, img.shape[0] //
                                                                        self.downsample_ratio, img.shape[1] //
                                                                        self.downsample_ratio))
        # TODO: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ albumentations
        if self.augment:
            # Albumentations
            # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –±–æ–∫—Å—ã –∏ –º–∞—Å–∫–∏, –ø–æ—ç—Ç–æ–º—É –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–∞–∫.
            img, labels = self.albumentations(img, labels)
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Ç–æ–∫ –ø–æ—Å–ª–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
            nl = len(labels)

            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ HSV
            augment_hsv(img, hgain=hyp["hsv_h"], sgain=hyp["hsv_s"], vgain=hyp["hsv_v"])

            # –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
            if random.random() < hyp["flipud"]:
                img = np.flipud(img)
                if nl:
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–µ—Ç–æ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞
                    labels[:, 2] = 1 - labels[:, 2]
                    # –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –º–∞—Å–∫ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
                    masks = torch.flip(masks, dims=[1])

            # –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            if random.random() < hyp["fliplr"]:
                img = np.fliplr(img)
                if nl:
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–µ—Ç–æ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞
                    labels[:, 1] = 1 - labels[:, 1]
                    # –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –º–∞—Å–∫ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
                    masks = torch.flip(masks, dims=[2])

            # Cutouts  # labels = cutout(img, labels, p=0.5)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–Ω–∑–æ—Ä–∞ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –º–µ—Ç–æ–∫
        labels_out = torch.zeros((nl, 6))
        if nl:
            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–∫ –≤ –≤—ã—Ö–æ–¥–Ω–æ–π —Ç–µ–Ω–∑–æ—Ä
            labels_out[:, 1:] = torch.from_numpy(labels)

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ HWC –≤ CHW –∏ –∏–∑ BGR –≤ RGB
        img = img.transpose((2, 0, 1))[::-1]
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
        img = np.ascontiguousarray(img)

        # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Ç–µ–Ω–∑–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ç–µ–Ω–∑–æ—Ä–∞ –º–µ—Ç–æ–∫, –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É, —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —Ç–µ–Ω–∑–æ—Ä–∞ –º–∞—Å–æ–∫
        return (torch.from_numpy(img), labels_out, self.im_files[index], shapes, masks)

        def load_mosaic(self, index):
            # –ó–∞–≥—Ä—É–∑—á–∏–∫ 4-–º–æ–∑–∞–∏–∫–∏ –≤ YOLOv5. –ó–∞–≥—Ä—É–∂–∞–µ—Ç 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ + 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ 4-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–∑–∞–∏–∫—É
            labels4, segments4 = [], []
            # –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            s = self.img_size
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –º–æ–∑–∞–∏–∫–∏
            yc, xc = (int(random.uniform(-x, 2 * s + x)) for x in self.mosaic_border)

            # 3 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            indices = [index] + random.choices(self.indices, k=3)
            for i, index in enumerate(indices):
                # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                img, _, (h, w) = self.load_image(index)

                # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ img4
                if i == 0:  # –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
                    img4 = np.full((s * 2, s * 2, img.shape[2]), 114, dtype=np.uint8)
                    x1a, y1a, x2a, y2a = max(xc - w, 0), max(yc - h, 0), xc, yc
                    x1b, y1b, x2b, y2b = w - (x2a - x1a), h - (y2a - y1a), w, h
                elif i == 1:  # –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª
                    x1a, y1a, x2a, y2a = xc, max(yc - h, 0), min(xc + w, s * 2), yc
                    x1b, y1b, x2b, y2b = 0, h - (y2a - y1a), min(w, x2a - x1a), h
                elif i == 2:  # –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
                    x1a, y1a, x2a, y2a = max(xc - w, 0), yc, xc, min(s * 2, yc + h)
                    x1b, y1b, x2b, y2b = w - (x2a - x1a), 0, w, min(y2a - y1a, h)
                elif i == 3:  # –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª
                    x1a, y1a, x2a, y2a = xc, yc, min(xc + w, s * 2), min(s * 2, yc + h)
                    x1b, y1b, x2b, y2b = 0, 0, min(w, x2a - x1a), min(y2a - y1a, h)

                # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ img4
                img4[y1a:y2a, x1a:x2a] = img[y1b:y2b, x1b:x2b]
                # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤
                padw = x1a - x1b
                padh = y1a - y1b

                # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–∫ –∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                labels, segments = self.labels[index].copy(), self.segments[index].copy()

                if labels.size:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç xywh –≤ –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã xyxy
                    labels[:, 1:] = xywhn2xyxy(labels[:, 1:], w, h, padw, padh)
                    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    segments = [xyn2xy(x, w, h, padw, padh) for x in segments]
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–∏
                labels4.append(labels)
                segments4.extend(segments)

            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
            labels4 = np.concatenate(labels4, 0)
            for x in (labels4[:, 1:], *segments4):
                np.clip(x, 0, 2 * s, out=x)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ random_perspective()
            # img4, labels4 = replicate(img4, labels4)  # –†–µ–ø–ª–∏–∫–∞—Ü–∏—è

            # –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è
            img4, labels4, segments4 = copy_paste(img4, labels4, segments4, p=self.hyp["copy_paste"])
            img4, labels4, segments4 = random_perspective(img4,
                                                          labels4,
                                                          segments4,
                                                          degrees=self.hyp["degrees"],
                                                          translate=self.hyp["translate"],
                                                          scale=self.hyp["scale"],
                                                          shear=self.hyp["shear"],
                                                          perspective=self.hyp["perspective"],
                                                          border=self.mosaic_border)  # –ì—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            return img4, labels4, segments4

        @staticmethod
        def collate_fn(batch):
            # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –±–∞—Ç—á–∞
            img, label, path, shapes, masks = zip(*batch)
            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–∞—Å–æ–∫ –≤ –æ–¥–∏–Ω —Ç–µ–Ω–∑–æ—Ä
            batched_masks = torch.cat(masks, 0)
            for i, l in enumerate(label):
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è build_targets()
                l[:, 0] = i
            return torch.stack(img, 0), torch.cat(label, 0), path, shapes, batched_masks

        def polygon2mask(img_size, polygons, color=1, downsample_ratio=1):
            """
            –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
                img_size (tuple): –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
                polygons (np.ndarray): [N, M], –≥–¥–µ N - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤,
                    M - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ (–¥–µ–ª–∏—Ç—Å—è –Ω–∞ 2).
            """
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–π –º–∞—Å–∫–∏
            mask = np.zeros(img_size, dtype=np.uint8)
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –≤ –º–∞—Å—Å–∏–≤ numpy
            polygons = np.asarray(polygons)
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –≤ int32
            polygons = polygons.astype(np.int32)
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø–æ–ª–∏–≥–æ–Ω–æ–≤
            shape = polygons.shape
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø–æ–ª–∏–≥–æ–Ω–æ–≤
            polygons = polygons.reshape(shape[0], -1, 2)
            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –Ω–∞ –º–∞—Å–∫–µ
            cv2.fillPoly(mask, polygons, color=color)
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –º–∞—Å–∫–∏
            nh, nw = (img_size[0] // downsample_ratio, img_size[1] // downsample_ratio)
            # –°–∂–∞—Ç–∏–µ –º–∞—Å–∫–∏
            mask = cv2.resize(mask, (nw, nh))
            return mask

        def polygons2masks(img_size, polygons, color, downsample_ratio=1):
            """
            –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
                img_size (tuple): –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
                polygons (list[np.ndarray]): –∫–∞–∂–¥—ã–π –ø–æ–ª–∏–≥–æ–Ω –∏–º–µ–µ—Ç —Ñ–æ—Ä–º—É [N, M],
                    N - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤,
                    M - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ (–¥–µ–ª–∏—Ç—Å—è –Ω–∞ 2).
            """
            masks = []
            for si in range(len(polygons)):
                # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞
                mask = polygon2mask(img_size, [polygons[si].reshape(-1)], color, downsample_ratio)
                masks.append(mask)
            return np.array(masks)

        def polygons2masks_overlap(img_size, segments, downsample_ratio=1):
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å–∫—É –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è —Ä–∞–∑–º–µ—Ä–æ–º (640, 640)."""
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–π –º–∞—Å–∫–∏ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
            masks = np.zeros((img_size[0] // downsample_ratio, img_size[1] // downsample_ratio),
                             dtype=np.int32 if len(segments) > 255 else np.uint8)
            areas = []
            ms = []
            for si in range(len(segments)):
                # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
                mask = polygon2mask(
                    img_size,
                    [segments[si].reshape(-1)],
                    downsample_ratio=downsample_ratio,
                    color=1,
                )
                ms.append(mask)
                # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ –º–∞—Å–∫–∏
                areas.append(mask.sum())
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–ª–æ—â–∞–¥–µ–π –≤ –º–∞—Å—Å–∏–≤ numpy
            areas = np.asarray(areas)
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø–ª–æ—â–∞–¥–µ–π
            index = np.argsort(-areas)
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å–æ–∫ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø–ª–æ—â–∞–¥–µ–π
            ms = np.array(ms)[index]
            for i in range(len(segments)):
                # –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Å–∫–∏ –Ω–∞ –Ω–æ–º–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞
                mask = ms[i] * (i + 1)
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å–∫–∏ –∫ –º–∞—Å–∫–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
                masks = masks + mask
                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –º–∞—Å–∫–∏ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
                masks = np.clip(masks, a_min=0, a_max=i + 1)
            return masks, index