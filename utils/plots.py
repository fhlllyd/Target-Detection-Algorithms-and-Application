# YOLOv5 üöÄ –æ—Ç Ultralytics, –ª–∏—Ü–µ–Ω–∑–∏—è GPL-3.0
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
"""

import contextlib
import math
import os
from copy import copy
from pathlib import Path
from urllib.error import URLError

import cv2
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sn
import torch
from PIL import Image, ImageDraw, ImageFont

from utils import TryExcept, threaded
from utils.general import (CONFIG_DIR, FONT, LOGGER, check_font, check_requirements, clip_boxes, increment_path,
                           is_ascii, xywh2xyxy, xyxy2xywh)
from utils.metrics import fitness
from utils.segment.general import scale_image

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
RANK = int(os.getenv('RANK', -1))
matplotlib.rc('font', **{'size': 11})
matplotlib.use('Agg')  # —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª—ã


class Colors:
    # –ü–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤ Ultralytics https://ultralytics.com/
    def __init__(self):
        # hex = matplotlib.colors.TABLEAU_COLORS.values()
        hexs = ('FF3838', 'FF9D97', 'FF701F', 'FFB21D', 'CFD231', '48F90A', '92CC17', '3DDB86', '1A9334', '00D4BB',
                '2C99A8', '00C2FF', '344593', '6473FF', '0018EC', '8438FF', '520085', 'CB38FF', 'FF95C8', 'FF37C7')
        self.palette = [self.hex2rgb(f'#{c}') for c in hexs]
        self.n = len(self.palette)

    def __call__(self, i, bgr=False):
        c = self.palette[int(i) % self.n]
        return (c[2], c[1], c[0]) if bgr else c

    @staticmethod
    def hex2rgb(h):  # –ø–æ—Ä—è–¥–æ–∫ rgb (PIL)
        return tuple(int(h[1 + i:1 + i + 2], 16) for i in (0, 2, 4))


colors = Colors()  # —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è 'from utils.plots import colors'


def check_pil_font(font=FONT, size=10):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à—Ä–∏—Ñ—Ç PIL TrueType, –∑–∞–≥—Ä—É–∂–∞—è –µ–≥–æ –≤ CONFIG_DIR, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    font = Path(font)
    font = font if font.exists() else (CONFIG_DIR / font.name)
    try:
        return ImageFont.truetype(str(font) if font.exists() else font.name, size)
    except Exception:  # –∑–∞–≥—Ä—É–∑–∏—Ç—å, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        try:
            check_font(font)
            return ImageFont.truetype(str(font), size)
        except TypeError:
            check_requirements('Pillow>=8.4.0')  # –∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ https://github.com/ultralytics/yolov5/issues/5374
        except URLError:  # –Ω–µ –≤ —Å–µ—Ç–∏
            return ImageFont.load_default()


class Annotator:
    # –ê–Ω–Ω–æ—Ç–∞—Ç–æ—Ä YOLOv5 –¥–ª—è –º–æ–∑–∞–∏–∫ train/val –∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    def __init__(self, im, line_width=None, font_size=None, font='Arial.ttf', pil=False, example='abc'):
        assert im.data.contiguous, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–º. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ np.ascontiguousarray(im) –∫ –≤—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤ Annotator().'
        non_ascii = not is_ascii(example)  # –Ω–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –º–µ—Ç–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–∑–∏–∞—Ç—Å–∫–∏–µ, –∞—Ä–∞–±—Å–∫–∏–µ, –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
        self.pil = pil or non_ascii
        if self.pil:  # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PIL
            self.im = im if isinstance(im, Image.Image) else Image.fromarray(im)
            self.draw = ImageDraw.Draw(self.im)
            self.font = check_pil_font(font='Arial.Unicode.ttf' if non_ascii else font,
                                       size=font_size or max(round(sum(self.im.size) / 2 * 0.035), 12))
        else:  # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å cv2
            self.im = im
        self.lw = line_width or max(round(sum(im.shape) / 2 * 0.003), 2)  # —à–∏—Ä–∏–Ω–∞ –ª–∏–Ω–∏–∏

    def box_label(self, box, label='', color=(128, 128, 128), txt_color=(255, 255, 255)):
        # –î–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω bounding box –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å –º–µ—Ç–∫–æ–π
        if self.pil or not is_ascii(label):
            self.draw.rectangle(box, width=self.lw, outline=color)  # bounding box
            if label:
                w, h = self.font.getsize(label)  # —à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
                outside = box[1] - h >= 0  # –º–µ—Ç–∫–∞ –ø–æ–º–µ—â–∞–µ—Ç—Å—è —Å–Ω–∞—Ä—É–∂–∏ bounding box
                self.draw.rectangle(
                    (box[0], box[1] - h if outside else box[1], box[0] + w + 1,
                     box[1] + 1 if outside else box[1] + h + 1),
                    fill=color,
                )
                self.draw.text((box[0], box[1] - h if outside else box[1]), label, fill=txt_color, font=self.font)
        else:  # cv2
            pass
           #p1, p2 = (int(box[0]), int(box[1])), (int(box[2]), int(box[3]))
            #cv2.rectangle(self.im, p1, p2, color, thickness=self.lw, lineType=cv2.LINE_AA)
            #if label:
                #tf = max(self.lw - 1, 1)  # —Ç–æ–ª—â–∏–Ω–∞ —à—Ä–∏—Ñ—Ç–∞
                #w, h = cv2.getTextSize(label, 0, fontScale=self.lw / 3, thickness=tf)[0]  # —à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
                #outside = p1[1] - h >= 3
               # p2 = p1[0] + w, p1[1] - h - 3 if outside else p1[1] + h + 3
                #cv2.rectangle(self.im, p1, p2, color, -1, cv2.LINE_AA)  # –∑–∞–ø–æ–ª–Ω–∏—Ç—å
                #cv2.putText(self.im,
                           # label, (p1[0], p1[1] - 2 if outside else p1[1] + h + 2),
                            #0,
                            #self.lw / 3,
                            #txt_color,
                            #thickness=tf,
                            #lineType=cv2.LINE_AA)

    def masks(self, masks, colors, im_gpu=None, alpha=1):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Å–æ–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            masks (tensor): –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –º–∞—Å–∫–∏ –Ω–∞ cuda, —Ä–∞–∑–º–µ—Ä: [n, h, w]
            colors (List[List[Int]]): —Ü–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–∞—Å–æ–∫, [[r, g, b] * n]
            im_gpu (tensor): –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ cuda, —Ä–∞–∑–º–µ—Ä: [3, h, w], –¥–∏–∞–ø–∞–∑–æ–Ω: [0, 1]
            alpha (float): –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –º–∞—Å–∫–∏: 0.0 –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ, 1.0 –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ
        """
        if self.pil:
            # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ numpy —Å–Ω–∞—á–∞–ª–∞
            self.im = np.asarray(self.im).copy()
        if im_gpu is None:
            # –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Å–æ–∫ —Ä–∞–∑–º–µ—Ä–∞ (h,w,n) —Å —Ü–≤–µ—Ç–∞–º–∏ —Å–ø–∏—Å–∫–∞ ([r,g,b], [r,g,b], ...)
            if len(masks) == 0:
                return
            if isinstance(masks, torch.Tensor):
                masks = torch.as_tensor(masks, dtype=torch.uint8)
                masks = masks.permute(1, 2, 0).contiguous()
                masks = masks.cpu().numpy()
            # masks = np.ascontiguousarray(masks.transpose(1, 2, 0))
            masks = scale_image(masks.shape[:2], masks, self.im.shape)
            masks = np.asarray(masks, dtype=np.float32)
            colors = np.asarray(colors, dtype=np.float32)  # —Ä–∞–∑–º–µ—Ä (n,3)
            s = masks.sum(2, keepdims=True).clip(0, 1)  # —Å–ª–æ–∂–∏—Ç—å –≤—Å–µ –º–∞—Å–∫–∏ –≤–º–µ—Å—Ç–µ
            masks = (masks @ colors).clip(0, 255)  # (h,w,n) @ (n,3) = (h,w,3)
            self.im[:] = masks * alpha + self.im * (1 - s * alpha)
        else:
            if len(masks) == 0:
                self.im[:] = im_gpu.permute(1, 2, 0).contiguous().cpu().numpy() * 255
            colors = torch.tensor(colors, device=im_gpu.device, dtype=torch.float32) / 255.0
            colors = colors[:, None, None]  # —Ä–∞–∑–º–µ—Ä(n,1,1,3)
            masks = masks.unsqueeze(3)  # —Ä–∞–∑–º–µ—Ä(n,h,w,1)
            masks_color = masks * (colors * alpha)  # —Ä–∞–∑–º–µ—Ä(n,h,w,3)

            inv_alph_masks = (1 - masks * alpha).cumprod(0)  # —Ä–∞–∑–º–µ—Ä(n,h,w,1)
            mcs = (masks_color * inv_alph_masks).sum(0) * 2  # mask color summand —Ä–∞–∑–º–µ—Ä(n,h,w,3)
            im_gpu = im_gpu.flip(dims=[0])  # flip channel
            im_gpu = im_gpu.permute(1, 2, 0).contiguous()  # —Ä–∞–∑–º–µ—Ä(h,w,3)
            im_gpu = inv_alph_masks[-1]  # —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            im_mask = (im_gpu * 255).byte().cpu().numpy()
            self.im[:] = scale_image(im_gpu.shape, im_mask, self.im.shape)
        if self.pil:
            # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å im –æ–±—Ä–∞—Ç–Ω–æ –≤ PIL –∏ –æ–±–Ω–æ–≤–∏—Ç—å draw
            self.fromarray(self.im)

    def rectangle(self, xy, fill=None, outline=None, width=1):
        # –î–æ–±–∞–≤–∏—Ç—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è PIL)
        self.draw.rectangle(xy, fill, outline, width)

    def text(self, xy, text, txt_color=(255, 255, 255), anchor='top'):
        # –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è PIL)
        if anchor == 'bottom':  # –Ω–∞—á–∞—Ç—å y —Å –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —à—Ä–∏—Ñ—Ç–∞
            w, h = self.font.getsize(text)  # —à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
            xy[1] += 1 - h
        self.draw.text(xy, text, fill=txt_color, font=self.font)

    def fromarray(self, im):
        # –û–±–Ω–æ–≤–∏—Ç—å self.im –∏–∑ –º–∞—Å—Å–∏–≤–∞ numpy
        self.im = im if isinstance(im, Image.Image) else Image.fromarray(im)
        self.draw = ImageDraw.Draw(self.im)

    def result(self):
        # –í–µ—Ä–Ω—É—Ç—å –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞
        return np.asarray(self.im)


def feature_visualization(x, module_type, stage, n=32, save_dir=Path('runs/detect/exp')):
    """
    x:              –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    module_type:    –¢–∏–ø –º–æ–¥—É–ª—è
    stage:          –≠—Ç–∞–ø –º–æ–¥—É–ª—è –≤ –º–æ–¥–µ–ª–∏
    n:              –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    save_dir:       –ö–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    if 'Detect' not in module_type:
        batch, channels, height, width = x.shape  # —Ä–∞–∑–º–µ—Ä—ã –ø–∞–∫–µ—Ç–∞, –∫–∞–Ω–∞–ª—ã, –≤—ã—Å–æ—Ç–∞, —à–∏—Ä–∏–Ω–∞
        if height > 1 and width > 1:
            f = save_dir / f"stage{stage}_{module_type.split('.')[-1]}_features.png"  # –∏–º—è —Ñ–∞–π–ª–∞

            blocks = torch.chunk(x[0].cpu(), channels, dim=0)  # –≤—ã–±—Ä–∞—Ç—å –∏–Ω–¥–µ–∫—Å –ø–∞–∫–µ—Ç–∞ 0, –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞–Ω–∞–ª–∞–º
            n = min(n, channels)  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            fig, ax = plt.subplots(math.ceil(n / 8), 8, tight_layout=True)  # 8 —Å—Ç—Ä–æ–∫ x n/8 —Å—Ç–æ–ª–±—Ü–æ–≤
            ax = ax.ravel()
            plt.subplots_adjust(wspace=0.05, hspace=0.05)
            for i in range(n):
                ax[i].imshow(blocks[i].squeeze())  # cmap='gray'
                ax[i].axis('off')

            LOGGER.info(f'–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {f}... ({n}/{channels})')
            plt.savefig(f, dpi=300, bbox_inches='tight')
            plt.close()
            np.save(str(f.with_suffix('.npy')), x[0].cpu().numpy())  # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ npy


def hist2d(x, y, n=100):
    # 2D –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤ labels.png –∏ evolve.png
    xedges, yedges = np.linspace(x.min(), x.max(), n), np.linspace(y.min(), y.max(), n)
    hist, xedges, yedges = np.histogram2d(x, y, (xedges, yedges))
    xidx = np.clip(np.digitize(x, xedges) - 1, 0, hist.shape[0] - 1)
    yidx = np.clip(np.digitize(y, yedges) - 1, 0, hist.shape[1] - 1)
    return np.log(hist[xidx, yidx])


def butter_lowpass_filtfilt(data, cutoff=1500, fs=50000, order=5):
    from scipy.signal import butter, filtfilt

    # https://stackoverflow.com/questions/28536191/how-to-filter-smooth-with-scipy-numpy
    def butter_lowpass(cutoff, fs, order):
        nyq = 0.5 * fs
        normal_cutoff = cutoff / nyq
        return butter(order, normal_cutoff, btype='low', analog=False)

    b, a = butter_lowpass(cutoff, fs, order=order)
    return filtfilt(b, a, data)  # –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä


def output_to_target(output, max_det=300):
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤—ã—Ö–æ–¥ –º–æ–¥–µ–ª–∏ –≤ —Ü–µ–ª–µ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç [batch_id, class_id, x, y, w, h, conf] –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    targets = []
    for i, o in enumerate(output):
        box, conf, cls = o[:max_det, :6].cpu().split((4, 1, 1), 1)
        j = torch.full((conf.shape[0], 1), i)
        targets.append(torch.cat((j, cls, xyxy2xywh(box), conf), 1))
    return torch.cat(targets, 0).numpy()


@threaded
def plot_images(images, targets, paths=None, fname='images.jpg', names=None):
    # –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –º–µ—Ç–∫–∞–º–∏
    if isinstance(images, torch.Tensor):
        images = images.cpu().float().numpy()
    if isinstance(targets, torch.Tensor):
        targets = targets.cpu().numpy()

    max_size = 1920  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    max_subplots = 16  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä 4x4
    bs, _, h, w = images.shape  # —Ä–∞–∑–º–µ—Ä—ã –ø–∞–∫–µ—Ç–∞, _, –≤—ã—Å–æ—Ç–∞, —à–∏—Ä–∏–Ω–∞
    bs = min(bs, max_subplots)  # –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    ns = np.ceil(bs ** 0.5)  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–æ–≤ (–∫–≤–∞–¥—Ä–∞—Ç)
    if np.max(images[0]) <= 1:
        images *= 255  # –¥–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    # –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    mosaic = np.full((int(ns * h), int(ns * w), 3), 255, dtype=np.uint8)  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    for i, im in enumerate(images):
        if i == max_subplots:  # –µ—Å–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–∞–∫–µ—Ç–µ –º–µ–Ω—å—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —á–µ–º –º—ã –æ–∂–∏–¥–∞–µ–º
            break
        x, y = int(w * (i // ns)), int(h * (i % ns))  # –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∞
        im = im.transpose(1, 2, 0)
        mosaic[y:y + h, x:x + w, :] = im

    # –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    scale = max_size / ns / max(h, w)
    if scale < 1:
        h = math.ceil(scale * h)
        w = math.ceil(scale * w)
        mosaic = cv2.resize(mosaic, tuple(int(x * ns) for x in (w, h)))

    # –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞—Ç—å
    fs = int((h + w) * ns * 0.01)  # —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
    annotator = Annotator(mosaic, line_width=round(fs / 10), font_size=fs, pil=True, example=names)
    for i in range(i + 1):
        x, y = int(w * (i // ns)), int(h * (i % ns))  # –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∞
        annotator.rectangle([x, y, x + w, y + h], None, (255, 255, 255), width=2)  # –≥—Ä–∞–Ω–∏—Ü—ã
        if paths:
            annotator.text((x + 5, y + 5), text=Path(paths[i]).name[:40], txt_color=(220, 220, 220))  # –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
        if len(targets) > 0:
            ti = targets[targets[:, 0] == i]  # —Ü–µ–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            boxes = xywh2xyxy(ti[:, 2:6]).T
            classes = ti[:, 1].astype('int')
            labels = ti.shape[1] == 6  # –º–µ—Ç–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ conf
            conf = None if labels else ti[:, 6]  # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–º–µ—Ç–∫–∞ vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ)

            if boxes.shape[1]:
                if boxes.max() <= 1.01:  # –µ—Å–ª–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å –¥–æ–ø—É—Å–∫–æ–º 0.01
                    boxes[[0, 2]] *= w  # –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –¥–æ –ø–∏–∫—Å–µ–ª–µ–π
                    boxes[[1, 3]] *= h
                elif scale < 1:  # –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç—Ä–µ–±—É—é—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    boxes *= scale
            boxes[[0, 2]] += x
            boxes[[1, 3]] += y
            for j, box in enumerate(boxes.T.tolist()):
                cls = classes[j]
                color = colors(cls)
                cls = names[cls] if names else cls
                if labels or conf[j] > 0.25:  # –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ 0.25
                    label = f'{cls}' if labels else f'{cls} {conf[j]:.1f}'
                    annotator.box_label(box, label, color=color)
    annotator.im.save(fname)  # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å


def plot_lr_scheduler(optimizer, scheduler, epochs=300, save_dir=''):
    # –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è Learning Rate, –∏–º–∏—Ç–∏—Ä—É—è –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª–Ω—ã—Ö —ç–ø–æ—Ö–∞—Ö
    optimizer, scheduler = copy(optimizer), copy(scheduler)  # –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—ã
    y = []
    for _ in range(epochs):
        scheduler.step()
        y.append(optimizer.param_groups[0]['lr'])
    plt.plot(y, '.-', label='LR')
    plt.xlabel('—ç–ø–æ—Ö–∞')
    plt.ylabel('LR')
    plt.grid()
    plt.xlim(0, epochs)
    plt.ylim(0)
    plt.savefig(Path(save_dir) / 'LR.png', dpi=200)
    plt.close()


def plot_val_txt():  # from utils.plots import *; plot_val()
    # –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã val.txt
    x = np.loadtxt('val.txt', dtype=np.float32)
    box = xyxy2xywh(x[:, :4])
    cx, cy = box[:, 0], box[:, 1]

    fig, ax = plt.subplots(1, 1, figsize=(6, 6), tight_layout=True)
    ax.hist2d(cx, cy, bins=600, cmax=10, cmin=0)
    ax.set_aspect('equal')
    plt.savefig('hist2d.png', dpi=300)

    fig, ax = plt.subplots(1, 2, figsize=(12, 6), tight_layout=True)
    ax[0].hist(cx, bins=600)
    ax[1].hist(cy, bins=600)
    plt.savefig('hist1d.png', dpi=200)


def plot_targets_txt():  # from utils.plots import *; plot_targets_txt()
    # –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã targets.txt
    x = np.loadtxt('targets.txt', dtype=np.float32).T
    s = ['x —Ü–µ–ª–∏', 'y —Ü–µ–ª–∏', '—à–∏—Ä–∏–Ω–∞ —Ü–µ–ª–∏', '–≤—ã—Å–æ—Ç–∞ —Ü–µ–ª–∏']
    fig, ax = plt.subplots(2, 2, figsize=(8, 8), tight_layout=True)
    ax = ax.ravel()
    for i in range(4):
        ax[i].hist(x[i], bins=100, label=f'{x[i].mean():.3g} +/- {x[i].std():.3g}')
        ax[i].legend()
        ax[i].set_title(s[i])
    plt.savefig('targets.jpg', dpi=200)


def plot_val_study(file='', dir='', x=None):  # from utils.plots import *; plot_val_study()
    # –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∞–π–ª study.txt, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π val.py (–∏–ª–∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤—Å–µ study*.txt –≤ –∫–∞—Ç–∞–ª–æ–≥–µ)
    save_dir = Path(file).parent if file else Path(dir)
    plot2 = False  # –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if plot2:
        ax = plt.subplots(2, 4, figsize=(10, 6), tight_layout=True)[1].ravel()

    fig2, ax2 = plt.subplots(1, 1, figsize=(8, 4), tight_layout=True)
    # for f in [save_dir / f'study_coco_{x}.txt' for x in ['yolov5n6', 'yolov5s6', 'yolov5m6', 'yolov5l6', 'yolov5x6']]:
    for f in sorted(save_dir.glob('study*.txt')):
        y = np.loadtxt(f, dtype=np.float32, usecols=[0, 1, 2, 3, 7, 8, 9], ndmin=2).T
        x = np.arange(y.shape[1]) if x is None else np.array(x)
        if plot2:
            s = ['P', 'R', 'mAP@.5', 'mAP@.5:.95', 't_preprocess (ms/img)', 't_inference (ms/img)', 't_NMS (ms/img)']
            for i in range(7):
                ax[i].plot(x, y[i], '.-', linewidth=2, markersize=8)
                ax[i].set_title(s[i])

        j = y[3].argmax() + 1
        ax2.plot(y[5, 1:j],
                 y[3, 1:j] * 1E2,
                 '.-',
                 linewidth=2,
                 markersize=8,
                 label=f.stem.replace('study_coco_', '').replace('yolo', 'YOLO'))

    ax2.plot(1E3 / np.array([209, 140, 97, 58, 35, 18]), [34.6, 40.5, 43.0, 47.5, 49.7, 51.5],
             'k.-',
             linewidth=2,
             markersize=8,
             alpha=.25,
             label='EfficientDet')

    ax2.grid(alpha=0.2)
    ax2.set_yticks(np.arange(20, 60, 5))
    ax2.set_xlim(0, 57)
    ax2.set_ylim(25, 55)
    ax2.set_xlabel('–°–∫–æ—Ä–æ—Å—Ç—å GPU (ms/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)')
    ax2.set_ylabel('COCO AP val')
    ax2.legend(loc='lower right')
    f = save_dir / 'study.png'
    print(f'–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {f}...')
    plt.savefig(f, dpi=300)


@TryExcept()  # –∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ https://github.com/ultralytics/yolov5/issues/5395
def plot_labels(labels, names=(), save_dir=Path('')):
    # –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–µ—Ç–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞
    LOGGER.info(f'–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –≤ {save_dir / 'labels.jpg'}... ')
    c, b = labels[:, 0], labels[:, 1:].transpose()  # –∫–ª–∞—Å—Å—ã, bounding boxes
    nc = int(c.max() + 1)  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤
    x = pd.DataFrame(b.transpose(), columns=['x', 'y', '—à–∏—Ä–∏–Ω–∞', '–≤—ã—Å–æ—Ç–∞'])

    # seaborn –∫–æ—Ä—Ä–µ–ª–æ–≥—Ä–∞–º–º–∞
    sn.pairplot(x, corner=True, diag_kind='auto', kind='hist', diag_kws=dict(bins=50), plot_kws=dict(pmax=0.9))
    plt.savefig(save_dir / 'labels_correlogram.jpg', dpi=200)
    plt.close()

    # matplotlib –º–µ—Ç–∫–∏
    matplotlib.use('svg')  # –±—ã—Å—Ç—Ä–µ–µ
    ax = plt.subplots(2, 2, figsize=(8, 8), tight_layout=True)[1].ravel()
    y = ax[0].hist(c, bins=np.linspace(0, nc, nc + 1) - 0.5, rwidth=0.8)
    with contextlib.suppress(Exception):  # –æ–∫—Ä–∞—Å–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –ø–æ –∫–ª–∞—Å—Å–∞–º
        [y[2].patches[i].set_color([x / 255 for x in colors(i)]) for i in range(nc)]  # –∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ #3195
    ax[0].set_ylabel('—ç–∫–∑–µ–º–ø–ª—è—Ä—ã')
    if 0 < len(names) < 30:
        ax[0].set_xticks(range(len(names)))
        ax[0].set_xticklabels(list(names.values()), rotation=90, fontsize=10)
    else:
        ax[0].set_xlabel('–∫–ª–∞—Å—Å—ã')
    sn.histplot(x, x='x', y='y', ax=ax[2], bins=50, pmax=0.9)
    sn.histplot(x, x='—à–∏—Ä–∏–Ω–∞', y='–≤—ã—Å–æ—Ç–∞', ax=ax[3], bins=50, pmax=0.9)

    # –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏
    labels[:, 1:3] = 0.5  # —Ü–µ–Ω—Ç—Ä
    labels[:, 1:] = xywh2xyxy(labels[:, 1:]) * 2000
    img = Image.fromarray(np.ones((2000, 2000, 3), dtype=np.uint8) * 255)
    for cls, *box in labels[:1000]:
        ImageDraw.Draw(img).rectangle(box, width=1, outline=colors(cls))  # –ø–æ—Å—Ç—Ä–æ–∏—Ç—å
    ax[1].imshow(img)
    ax[1].axis('off')

    for a in [0, 1, 2, 3]:
        for s in ['top', 'right', 'left', 'bottom']:
            ax[a].spines[s].set_visible(False)

    plt.savefig(save_dir / 'labels.jpg', dpi=200)
    matplotlib.use('Agg')
    plt.close()


def imshow_cls(im, labels=None, pred=None, names=None, nmax=25, verbose=False, f=Path('images.jpg')):
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –º–µ—Ç–∫–∞–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    from utils.augmentations import denormalize

    names = names or [f'class{i}' for i in range(1000)]
    blocks = torch.chunk(denormalize(im.clone()).cpu().float(), len(im),
                         dim=0)  # –≤—ã–±—Ä–∞—Ç—å –∏–Ω–¥–µ–∫—Å –ø–∞–∫–µ—Ç–∞ 0, –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞–Ω–∞–ª–∞–º
    n = min(len(blocks), nmax)  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    m = min(8, round(n ** 0.5))  # 8 x 8 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    fig, ax = plt.subplots(math.ceil(n / m), m)  # 8 —Å—Ç—Ä–æ–∫ x n/8 —Å—Ç–æ–ª–±—Ü–æ–≤
    ax = ax.ravel() if m > 1 else [ax]
    # plt.subplots_adjust(wspace=0.05, hspace=0.05)
    for i in range(n):
        ax[i].imshow(blocks[i].squeeze().permute((1, 2, 0)).numpy().clip(0.0, 1.0))
        ax[i].axis('off')
        if labels is not None:
            s = names[labels[i]] + (f'‚Äî{names[pred[i]]}' if pred is not None else '')
            ax[i].set_title(s, fontsize=8, verticalalignment='top')
    plt.savefig(f, dpi=300, bbox_inches='tight')
    plt.close()
    if verbose:
        LOGGER.info(f'–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {f}')
        if labels is not None:
            LOGGER.info('–ò—Å—Ç–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:     ' + ' '.join(f'{names[i]:3s}' for i in labels[:nmax]))
        if pred is not None:
            LOGGER.info('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:' + ' '.join(f'{names[i]:3s}' for i in pred[:nmax]))
    return f


def plot_evolve(evolve_csv='path/to/evolve.csv'):  # from utils.plots import *; plot_evolve()
    # –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–≤–æ–ª—é—Ü–∏–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ evolve.csv
    evolve_csv = Path(evolve_csv)
    data = pd.read_csv(evolve_csv)
    keys = [x.strip() for x in data.columns]
    x = data.values
    f = fitness(x)
    j = np.argmax(f)  # –∏–Ω–¥–µ–∫—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏
    plt.figure(figsize=(10, 12), tight_layout=True)
    matplotlib.rc('font', **{'size': 8})
    print(f'–õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ {j} —Ñ–∞–π–ª–∞ {evolve_csv}:')
    for i, k in enumerate(keys[7:]):
        v = x[:, 7 + i]
        mu = v[j]  # –ª—É—á—à–∏–π –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        plt.subplot(6, 5, i + 1)
        plt.scatter(v, f, c=hist2d(v, f, 20), cmap='viridis', alpha=.8, edgecolors='none')
        plt.plot(mu, f.max(), 'k+', markersize=15)
        plt.title(f'{k} = {mu:.3g}', fontdict={'size': 9})  # –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ 40 —Å–∏–º–≤–æ–ª–æ–≤
        if i % 5 != 0:
            plt.yticks([])
        print(f'{k:>15}: {mu:.3g}')
    f = evolve_csv.with_suffix('.png')  # –∏–º—è —Ñ–∞–π–ª–∞
    plt.savefig(f, dpi=200)
    plt.close()
    print(f'–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {f}')


def plot_results(file='path/to/results.csv', dir=''):
    # –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è results.csv. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: from utils.plots import *; plot_results('path/to/results.csv')
    save_dir = Path(file).parent if file else Path(dir)
    fig, ax = plt.subplots(2, 5, figsize=(12, 6), tight_layout=True)
    ax = ax.ravel()
    files = list(save_dir.glob('results*.csv'))
    assert len(files), f'–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ results.csv –≤ {save_dir.resolve()}, –Ω–µ—á–µ–≥–æ —Å—Ç—Ä–æ–∏—Ç—å.'
    for f in files:
        try:
            data = pd.read_csv(f)
            s = [x.strip() for x in data.columns]
            x = data.values[:, 0]
            for i, j in enumerate([1, 2, 3, 4, 5, 8, 9, 10, 6, 7]):
                y = data.values[:, j].astype('float')
                # y[y == 0] = np.nan  # –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                ax[i].plot(x, y, marker='.', label=f.stem, linewidth=2, markersize=8)
                ax[i].set_title(s[j], fontsize=12)
                # if j in [8, 9, 10]:  # —Å–æ–≤–º–µ—Å—Ç–∏—Ç—å –æ—Å–∏ y –¥–ª—è –ø–æ—Ç–µ—Ä—å train –∏ val
                #     ax[i].get_shared_y_axes().join(ax[i], ax[i - 5])
        except Exception as e:
            LOGGER.info(f'–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {f}: {e}')
    ax[1].legend()
    fig.savefig(save_dir / 'results.png', dpi=200)
    plt.close()


def profile_idetection(start=0, stop=0, labels=(), save_dir=''):
    # –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º iDetection '*.txt'. from utils.plots import *; profile_idetection()
    ax = plt.subplots(2, 4, figsize=(12, 6), tight_layout=True)[1].ravel()
    s = ['–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', '–°–≤–æ–±–æ–¥–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–ì–ë)', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –û–ó–£ (–ì–ë)', '–ë–∞—Ç–∞—Ä–µ—è', 'dt_raw (–º—Å)', 'dt_smooth (–º—Å)', '—Ä–µ–∞–ª—å–Ω—ã–π FPS']
    files = list(Path(save_dir).glob('frames*.txt'))
    for fi, f in enumerate(files):
        try:
            results = np.loadtxt(f, ndmin=2).T[:, 90:-30]  # –æ–±—Ä–µ–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
            n = results.shape[1]  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            x = np.arange(start, min(stop, n) if stop else n)
            results = results[:, x]
            t = (results[0] - results[0].min())  # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å t0=0—Å
            results[0] = x
            for i, a in enumerate(ax):
                if i < len(results):
                    label = labels[fi] if len(labels) else f.stem.replace('frames_', '')
                    a.plot(t, results[i], marker='.', label=label, linewidth=1, markersize=5)
                    a.set_title(s[i])
                    a.set_xlabel('–≤—Ä–µ–º—è (—Å)')
                    # if fi == len(files) - 1:
                    #     a.set_ylim(bottom=0)
                    for side in ['top', 'right']:
                        a.spines[side].set_visible(False)
                else:
                    a.remove()
        except Exception as e:
            print(f'–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {f}; {e}')
    ax[1].legend()
    plt.savefig(Path(save_dir) / 'idetection_profile.png', dpi=200)


def save_one_box(xyxy, im, file=Path('im.jpg'), gain=1.02, pad=10, square=False, BGR=False, save=True):
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ {file} —Å —Ä–∞–∑–º–µ—Ä–æ–º –æ–±—Ä–µ–∑–∫–∏ {gain} –∏ {pad} –ø–∏–∫—Å–µ–ª–µ–π. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏/–∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –æ–±—Ä–µ–∑–∫—É
    xyxy = torch.tensor(xyxy).view(-1, 4)
    b = xyxy2xywh(xyxy)  # bounding boxes
    if square:
        b[:, 2:] = b[:, 2:].max(1)[0].unsqueeze(1)  # –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤ –∫–≤–∞–¥—Ä–∞—Ç
    b[:, 2:] = b[:, 2:] * gain + pad  # —Ä–∞–∑–º–µ—Ä bounding box * gain + pad
    xyxy = xywh2xyxy(b).long()
    clip_boxes(xyxy, im.shape)
    crop = im[int(xyxy[0, 1]):int(xyxy[0, 3]), int(xyxy[0, 0]):int(xyxy[0, 2]), ::(1 if BGR else -1)]
    if save:
        file.parent.mkdir(parents=True, exist_ok=True)  # —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥
        f = str(increment_path(file).with_suffix('.jpg'))
        # cv2.imwrite(f, crop)  # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ BGR, https://github.com/ultralytics/yolov5/issues/7007 –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ö—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å—É–±—Å—ç–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        Image.fromarray(crop[..., ::-1]).save(f, quality=95, subsampling=0)  # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ RGB
    return crop