# YOLOv5 üöÄ –æ—Ç Ultralytics, –ª–∏—Ü–µ–Ω–∑–∏—è GPL-3.0
"""
–ú–µ—Ç—Ä–∏–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏
"""

import math
import warnings
from pathlib import Path

import matplotlib.pyplot as plt
import numpy as np
import torch

from utils import TryExcept, threaded


def fitness(x):
    # –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ –∫–∞–∫ –≤–∑–≤–µ—à–µ–Ω–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
    w = [0.0, 0.0, 0.1, 0.9]  # –≤–µ—Å–∞ –¥–ª—è [—Ç–æ—á–Ω–æ—Å—Ç—å, –ø–æ–ª–Ω–æ—Ç–∞, mAP@0.5, mAP@0.5:0.95]
    return (x[:, :4] * w).sum(1)


def smooth(y, f=0.05):
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ–∫–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ —Å –¥–æ–ª–µ–π f
    nf = round(len(y) * f * 2) // 2 + 1  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ—á–µ—Ç–Ω—ã–º)
    p = np.ones(nf // 2)  # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü–∞–º–∏
    yp = np.concatenate((p * y[0], y, p * y[-1]), 0)  # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ y
    return np.convolve(yp, np.ones(nf) / nf, mode='valid')  # —Å–≥–ª–∞–∂–µ–Ω–Ω—ã–π y


def ap_per_class(tp, conf, pred_cls, target_cls, plot=False, save_dir='.', names=(), eps=1e-16, prefix=""):
    """ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞, —É—á–∏—Ç—ã–≤–∞—è –∫—Ä–∏–≤—ã–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª–Ω–æ—Ç—ã.
    –ò—Å—Ç–æ—á–Ω–∏–∫: https://github.com/rafaelpadilla/Object-Detection-Metrics.
    # –ê—Ä–≥—É–º–µ–Ω—Ç—ã
        tp:  –∏—Å—Ç–∏–Ω–Ω—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (nparray, nx1 –∏–ª–∏ nx10).
        conf:  –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ—Ç 0 –¥–æ 1 (nparray).
        pred_cls:  –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –æ–±—ä–µ–∫—Ç–æ–≤ (nparray).
        target_cls:  –∏—Å—Ç–∏–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –æ–±—ä–µ–∫—Ç–æ–≤ (nparray).
        plot:  –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫—Ä–∏–≤–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏-–ø–æ–ª–Ω–æ—Ç—ã –ø—Ä–∏ mAP@0.5
        save_dir:  –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç
        –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å, –≤—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è –≤ py-faster-rcnn.
    """

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–±—ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
    i = np.argsort(-conf)
    tp, conf, pred_cls = tp[i], conf[i], pred_cls[i]

    # –ü–æ–∏—Å–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
    unique_classes, nt = np.unique(target_cls, return_counts=True)
    nc = unique_classes.shape[0]  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∏–≤–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏-–ø–æ–ª–Ω–æ—Ç—ã –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ AP –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    px, py = np.linspace(0, 1, 1000), []  # –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    ap, p, r = np.zeros((nc, tp.shape[1])), np.zeros((nc, 1000)), np.zeros((nc, 1000))
    for ci, c in enumerate(unique_classes):
        i = pred_cls == c
        n_l = nt[ci]  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–∫
        n_p = i.sum()  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        if n_p == 0 or n_l == 0:
            continue

        # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –ª–æ–∂–Ω—ã—Ö –∏ –∏—Å—Ç–∏–Ω–Ω—ã—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        fpc = (1 - tp[i]).cumsum(0)
        tpc = tp[i].cumsum(0)

        # –ü–æ–ª–Ω–æ—Ç–∞
        recall = tpc / (n_l + eps)  # –∫—Ä–∏–≤–∞—è –ø–æ–ª–Ω–æ—Ç—ã
        r[ci] = np.interp(-px, -conf[i], recall[:, 0], left=0)  # –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π x, xp, —Ç–∞–∫ –∫–∞–∫ xp —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è

        # –¢–æ—á–Ω–æ—Å—Ç—å
        precision = tpc / (tpc + fpc)  # –∫—Ä–∏–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç–∏
        p[ci] = np.interp(-px, -conf[i], precision[:, 0], left=1)  # —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ—Ç—ã

        # AP –∏–∑ –∫—Ä–∏–≤–æ–π –ø–æ–ª–Ω–æ—Ç—ã-—Ç–æ—á–Ω–æ—Å—Ç–∏
        for j in range(tp.shape[1]):
            ap[ci, j], mpre, mrec = compute_ap(recall[:, j], precision[:, j])
            if plot and j == 0:
                py.append(np.interp(px, mrec, mpre))  # —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–∏ mAP@0.5

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ F1 (–≥–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª–Ω–æ—Ç—ã)
    f1 = 2 * p * r / (p + r + eps)
    names = [v for k, v in names.items() if k in unique_classes]  # —Å–ø–∏—Å–æ–∫: —Ç–æ–ª—å–∫–æ –∫–ª–∞—Å—Å—ã, –∏–º–µ—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    names = dict(enumerate(names))  # –≤ —Å–ª–æ–≤–∞—Ä—å
    if plot:
        plot_pr_curve(px, py, ap, Path(save_dir) / f'{prefix}PR_curve.png', names)
        plot_mc_curve(px, f1, Path(save_dir) / f'{prefix}F1_curve.png', names, ylabel='F1')
        plot_mc_curve(px, p, Path(save_dir) / f'{prefix}P_curve.png', names, ylabel='–¢–æ—á–Ω–æ—Å—Ç—å')
        plot_mc_curve(px, r, Path(save_dir) / f'{prefix}R_curve.png', names, ylabel='–ü–æ–ª–Ω–æ—Ç–∞')

    i = smooth(f1.mean(0), 0.1).argmax()  # –∏–Ω–¥–µ–∫—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ F1
    p, r, f1 = p[:, i], r[:, i], f1[:, i]
    tp = (r * nt).round()  # –∏—Å—Ç–∏–Ω–Ω—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    fp = (tp / (p + eps) - tp).round()  # –ª–æ–∂–Ω—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    return tp, fp, p, r, f1, ap, unique_classes.astype(int)


def compute_ap(recall, precision):
    """ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏, —É—á–∏—Ç—ã–≤–∞—è –∫—Ä–∏–≤—ã–µ –ø–æ–ª–Ω–æ—Ç—ã –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
    # –ê—Ä–≥—É–º–µ–Ω—Ç—ã
        recall:    –∫—Ä–∏–≤–∞—è –ø–æ–ª–Ω–æ—Ç—ã (—Å–ø–∏—Å–æ–∫)
        precision: –∫—Ä–∏–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç–∏ (—Å–ø–∏—Å–æ–∫)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç
        –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å, –∫—Ä–∏–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç–∏, –∫—Ä–∏–≤–∞—è –ø–æ–ª–Ω–æ—Ç—ã
    """

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ sentinel –∑–Ω–∞—á–µ–Ω–∏–π –≤ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü
    mrec = np.concatenate(([0.0], recall, [1.0]))
    mpre = np.concatenate(([1.0], precision, [0.0]))

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±–æ–ª–æ—á–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
    mpre = np.flip(np.maximum.accumulate(np.flip(mpre)))

    # –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ –ø–æ–¥ –∫—Ä–∏–≤–æ–π
    method = 'interp'  # –º–µ—Ç–æ–¥—ã: 'continuous', 'interp'
    if method == 'interp':
        x = np.linspace(0, 1, 101)  # 101-—Ç–æ—á–µ—á–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è (COCO)
        ap = np.trapz(np.interp(x, mrec, mpre), x)  # –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
    else:  # 'continuous'
        i = np.where(mrec[1:] != mrec[:-1])[0]  # —Ç–æ—á–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –æ—Å—å x (–ø–æ–ª–Ω–æ—Ç–∞)
        ap = np.sum((mrec[i + 1] - mrec[i]) * mpre[i + 1])  # –ø–ª–æ—â–∞–¥—å –ø–æ–¥ –∫—Ä–∏–≤–æ–π

    return ap, mpre, mrec


class ConfusionMatrix:
    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è https://github.com/kaanakan/object_detection_confusion_matrix
    def __init__(self, nc, conf=0.25, iou_thres=0.45):
        self.matrix = np.zeros((nc + 1, nc + 1))
        self.nc = nc  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤
        self.conf = conf
        self.iou_thres = iou_thres

    def process_batch(self, detections, labels):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –Ω–∞–¥ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º (–∏–Ω–¥–µ–∫—Å –î–∂–∞–∫–∞—Ä–¥–∞) –¥–ª—è bounding boxes.
        –û–∂–∏–¥–∞—é—Ç—Å—è –æ–±–µ –≥—Ä—É–ø–ø—ã bounding boxes –≤ —Ñ–æ—Ä–º–∞—Ç–µ (x1, y1, x2, y2).
        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            detections (Array[N, 6]), x1, y1, x2, y2, conf, class
            labels (Array[M, 5]), class, x1, y1, x2, y2
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            None, –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –æ—à–∏–±–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
        """
        if detections is None:
            gt_classes = labels.int()
            for gc in gt_classes:
                self.matrix[self.nc, gc] += 1  # —Ñ–æ–Ω FN
            return

        detections = detections[detections[:, 4] > self.conf]
        gt_classes = labels[:, 0].int()
        detection_classes = detections[:, 5].int()
        iou = box_iou(labels[:, 1:], detections[:, :4])

        x = torch.where(iou > self.iou_thres)
        if x[0].shape[0]:
            matches = torch.cat((torch.stack(x, 1), iou[x[0], x[1]][:, None]), 1).cpu().numpy()
            if x[0].shape[0] > 1:
                matches = matches[matches[:, 2].argsort()[::-1]]
                matches = matches[np.unique(matches[:, 1], return_index=True)[1]]
                matches = matches[matches[:, 2].argsort()[::-1]]
                matches = matches[np.unique(matches[:, 0], return_index=True)[1]]
        else:
            matches = np.zeros((0, 3))

        n = matches.shape[0] > 0
        m0, m1, _ = matches.transpose().astype(int)
        for i, gc in enumerate(gt_classes):
            j = m0 == i
            if n and sum(j) == 1:
                self.matrix[detection_classes[m1[j]], gc] += 1  # –≤–µ—Ä–Ω–æ
            else:
                self.matrix[self.nc, gc] += 1  # –∏—Å—Ç–∏–Ω–Ω—ã–π —Ñ–æ–Ω

        if n:
            for i, dc in enumerate(detection_classes):
                if not any(m1 == i):
                    self.matrix[dc, self.nc] += 1  # –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–æ–Ω

    def matrix(self):
        return self.matrix

    def tp_fp(self):
        tp = self.matrix.diagonal()  # –∏—Å—Ç–∏–Ω–Ω—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        fp = self.matrix.sum(1) - tp  # –ª–æ–∂–Ω—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        # fn = self.matrix.sum(0) - tp  # –ª–æ–∂–Ω—ã–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è)
        return tp[:-1], fp[:-1]  # —É–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Å —Ñ–æ–Ω

    @TryExcept('WARNING ‚ö†Ô∏è ConfusionMatrix plot failure')
    def plot(self, normalize=True, save_dir='', names=()):
        import seaborn as sn

        array = self.matrix / ((self.matrix.sum(0).reshape(1, -1) + 1E-9) if normalize else 1)  # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
        array[array < 0.005] = np.nan  # –Ω–µ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞—Ç—å (–ø–æ—è–≤–∏—Ç—Å—è –∫–∞–∫ 0.00)

        fig, ax = plt.subplots(1, 1, figsize=(12, 9), tight_layout=True)
        nc, nn = self.nc, len(names)  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤, –∏–º–µ–Ω–∞
        sn.set(font_scale=1.0 if nc < 50 else 0.8)  # –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ –º–µ—Ç–æ–∫
        labels = (0 < nn < 99) and (nn == nc)  # –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–º–µ–Ω–∞ –∫ –º–µ—Ç–∫–∞–º –æ—Å–µ–π
        ticklabels = (names + ['background']) if labels else "auto"
        with warnings.catch_warnings():
            warnings.simplefilter('ignore')  # –ø–æ–¥–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–π –º–∞—Ç—Ä–∏—Ü–µ
            sn.heatmap(array,
                       ax=ax,
                       annot=nc < 30,
                       annot_kws={
                           "size": 8},
                       cmap='Blues',
                       fmt='.2f',
                       square=True,
                       vmin=0.0,
                       xticklabels=ticklabels,
                       yticklabels=ticklabels).set_facecolor((1, 1, 1))
        ax.set_ylabel('–ò—Å—Ç–∏–Ω–Ω—ã–π')
        ax.set_ylabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π')
        ax.set_title('–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫')
        fig.savefig(Path(save_dir) / 'confusion_matrix.png', dpi=250)
        plt.close(fig)

    def print(self):
        for i in range(self.nc + 1):
            print(' '.join(map(str, self.matrix[i])))


def bbox_iou(box1, box2, xywh=True, GIoU=False, DIoU=False, CIoU=False, eps=1e-7):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –Ω–∞–¥ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º (IoU) –¥–ª—è box1(1,4) –∏ box2(n,4)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç bounding boxes
    if xywh:  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑ xywh –≤ xyxy
        (x1, y1, w1, h1), (x2, y2, w2, h2) = box1.chunk(4, -1), box2.chunk(4, -1)
        w1_, h1_, w2_, h2_ = w1 / 2, h1 / 2, w2 / 2, h2 / 2
        b1_x1, b1_x2, b1_y1, b1_y2 = x1 - w1_, x1 + w1_, y1 - h1_, y1 + h1_
        b2_x1, b2_x2, b2_y1, b2_y2 = x2 - w2_, x2 + w2_, y2 - h2_, y2 + h2_
    else:  # x1, y1, x2, y2 = box1
        b1_x1, b1_y1, b1_x2, b1_y2 = box1.chunk(4, -1)
        b2_x1, b2_y1, b2_x2, b2_y2 = box2.chunk(4, -1)
        w1, h1 = b1_x2 - b1_x1, b1_y2 - b1_y1 + eps
        w2, h2 = b2_x2 - b2_x1, b2_y2 - b2_y1 + eps

    # –ü–ª–æ—â–∞–¥—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    inter = (torch.min(b1_x2, b2_x2) - torch.max(b1_x1, b2_x1)).clamp(0) * \
            (torch.min(b1_y2, b2_y2) - torch.max(b1_y1, b2_y1)).clamp(0)

    # –ü–ª–æ—â–∞–¥—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
    union = w1 * h1 + w2 * h2 - inter + eps

    # IoU
    iou = inter / union
    if CIoU or DIoU or GIoU:
        cw = torch.max(b1_x2, b2_x2) - torch.min(b1_x1, b2_x1)  # —à–∏—Ä–∏–Ω–∞ –≤—ã–ø—É–∫–ª–æ–π –æ–±–æ–ª–æ—á–∫–∏ (–Ω–∞–∏–º–µ–Ω—å—à–∏–π –æ—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫)
        ch = torch.max(b1_y2, b2_y2) - torch.min(b1_y1, b2_y1)  # –≤—ã—Å–æ—Ç–∞ –≤—ã–ø—É–∫–ª–æ–π –æ–±–æ–ª–æ—á–∫–∏
        if CIoU or DIoU:  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ –ø–æ–ª–Ω–∞—è IoU https://arxiv.org/abs/1911.08287v1
            c2 = cw ** 2 + ch ** 2 + eps  # –∫–≤–∞–¥—Ä–∞—Ç –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –≤—ã–ø—É–∫–ª–æ–π –æ–±–æ–ª–æ—á–∫–∏
            rho2 = ((b2_x1 + b2_x2 - b1_x1 - b1_x2) ** 2 + (b2_y1 + b2_y2 - b1_y1 - b1_y2) ** 2) / 4  # –∫–≤–∞–¥—Ä–∞—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ü–µ–Ω—Ç—Ä–∞–º–∏
            if CIoU:  # https://github.com/Zzh-tju/DIoU-SSD-pytorch/blob/master/utils/box/box_utils.py#L47
                v = (4 / math.pi ** 2) * torch.pow(torch.atan(w2 / h2) - torch.atan(w1 / h1), 2)
                with torch.no_grad():
                    alpha = v / (v - iou + (1 + eps))
                return iou - (rho2 / c2 + v * alpha)  # –ø–æ–ª–Ω–∞—è IoU
            return iou - rho2 / c2  # DIoU
        c_area = cw * ch + eps  # –ø–ª–æ—â–∞–¥—å –≤—ã–ø—É–∫–ª–æ–π –æ–±–æ–ª–æ—á–∫–∏
        return iou - (c_area - union) / c_area  # GIoU https://arxiv.org/pdf/1902.09630.pdf
    return iou  # IoU


def box_iou(box1, box2, eps=1e-7):
    # https://github.com/pytorch/vision/blob/master/torchvision/ops/boxes.py
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –Ω–∞–¥ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º (Jaccard index) –¥–ª—è bounding boxes.
    –û–±–µ –≥—Ä—É–ø–ø—ã bounding boxes –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ (x1, y1, x2, y2).
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        box1 (Tensor[N, 4])
        box2 (Tensor[M, 4])
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        iou (Tensor[N, M]): –º–∞—Ç—Ä–∏—Ü–∞ NxM, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –∑–Ω–∞—á–µ–Ω–∏—è IoU –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
            bounding boxes –∏–∑ box1 –∏ box2
    """

    # inter(N,M) = (rb(N,M,2) - lt(N,M,2)).clamp(0).prod(2)
    (a1, a2), (b1, b2) = box1.unsqueeze(1).chunk(2, 2), box2.unsqueeze(0).chunk(2, 2)
    inter = (torch.min(a2, b2) - torch.max(a1, b1)).clamp(0).prod(2)

    # IoU = inter / (area1 + area2 - inter)
    return inter / ((a2 - a1).prod(2) + (b2 - b1).prod(2) - inter + eps)


def bbox_ioa(box1, box2, eps=1e-7):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –Ω–∞–¥ –ø–ª–æ—â–∞–¥—å—é box2 –¥–ª—è box1 –∏ box2. Bounding boxes –≤ —Ñ–æ—Ä–º–∞—Ç–µ x1y1x2y2
    box1:       np.array —Ä–∞–∑–º–µ—Ä–∞ (4)
    box2:       np.array —Ä–∞–∑–º–µ—Ä–∞ (nx4)
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: np.array —Ä–∞–∑–º–µ—Ä–∞ (n)
    """

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç bounding boxes
    b1_x1, b1_y1, b1_x2, b1_y2 = box1
    b2_x1, b2_y1, b2_x2, b2_y2 = box2.T

    # –ü–ª–æ—â–∞–¥—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    inter_area = (np.minimum(b1_x2, b2_x2) - np.maximum(b1_x1, b2_x1)).clip(0) * \
                 (np.minimum(b1_y2, b2_y2) - np.maximum(b1_y1, b2_y1)).clip(0)

    # –ü–ª–æ—â–∞–¥—å box2
    box2_area = (b2_x2 - b2_x1) * (b2_y2 - b2_y1) + eps

    # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –Ω–∞–¥ –ø–ª–æ—â–∞–¥—å—é box2
    return inter_area / box2_area


def wh_iou(wh1, wh2, eps=1e-7):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É nxm IoU. wh1 —Ä–∞–∑–º–µ—Ä–∞ nx2, wh2 —Ä–∞–∑–º–µ—Ä–∞ mx2
    wh1 = wh1[:, None]  # [N,1,2]
    wh2 = wh2[None]  # [1,M,2]
    inter = torch.min(wh1, wh2).prod(2)  # [N,M]
    return inter / (wh1.prod(2) + wh2.prod(2) - inter + eps)  # iou = inter / (area1 + area2 - inter)


# –ì—Ä–∞—Ñ–∏–∫–∏ ----------------------------------------------------------------------------------------------------------------


@threaded
def plot_pr_curve(px, py, ap, save_dir=Path('pr_curve.png'), names=()):
    # –ö—Ä–∏–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç–∏-–ø–æ–ª–Ω–æ—Ç—ã
    fig, ax = plt.subplots(1, 1, figsize=(9, 6), tight_layout=True)
    py = np.stack(py, axis=1)

    if 0 < len(names) < 21:  # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–µ–≥–µ–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ 21
        for i, y in enumerate(py.T):
            ax.plot(px, y, linewidth=1, label=f'{names[i]} {ap[i, 0]:.3f}')  # plot(recall, precision)
    else:
        ax.plot(px, py, linewidth=1, color='grey')  # plot(recall, precision)

    ax.plot(px, py.mean(1), linewidth=3, color='blue', label='–≤—Å–µ –∫–ª–∞—Å—Å—ã %.3f mAP@0.5' % ap[:, 0].mean())
    ax.set_xlabel('–ü–æ–ª–Ω–æ—Ç–∞')
    ax.set_ylabel('–¢–æ—á–Ω–æ—Å—Ç—å')
    ax.set_xlim(0, 1)
    ax.set_ylim(0, 1)
    ax.legend(bbox_to_anchor=(1.04, 1), loc="upper left")
    ax.set_title('–ö—Ä–∏–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç–∏-–ø–æ–ª–Ω–æ—Ç—ã')
    fig.savefig(save_dir, dpi=250)
    plt.close(fig)


@threaded
def plot_mc_curve(px, py, save_dir=Path('mc_curve.png'), names=(), xlabel='–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å', ylabel='–ú–µ—Ç—Ä–∏–∫–∞'):
    # –ö—Ä–∏–≤–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    fig, ax = plt.subplots(1, 1, figsize=(9, 6), tight_layout=True)

    if 0 < len(names) < 21:  # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–µ–≥–µ–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ 21
        for i, y in enumerate(py):
            ax.plot(px, y, linewidth=1, label=f'{names[i]}')  # plot(confidence, metric)
    else:
        ax.plot(px, py.T, linewidth=1, color='grey')  # plot(confidence, metric)

    y = smooth(py.mean(0), 0.05)
    ax.plot(px, y, linewidth=3, color='blue', label=f'–≤—Å–µ –∫–ª–∞—Å—Å—ã {y.max():.2f} –ø—Ä–∏ {px[y.argmax()]:.3f}')
    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)
    ax.set_xlim(0, 1)
    ax.set_ylim(0, 1)
    ax.legend(bbox_to_anchor=(1.04, 1), loc="upper left")
    ax.set_title(f'–ö—Ä–∏–≤–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ {ylabel} –æ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏')
    fig.savefig(save_dir, dpi=250)
    plt.close(fig)