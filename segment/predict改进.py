# YOLOv5 üöÄ by Ultralytics, GPL-3.0 license
"""
Run YOLOv5 segmentation inference on images, videos, directories, streams, etc.

Usage - sources:
    $ python segment/predict.py --weights yolov5s-seg.pt --source 0                               # webcam
                                                                  img.jpg                         # image
                                                                  vid.mp4                         # video
                                                                  screen                          # screenshot
                                                                  path/                           # directory
                                                                  'path/*.jpg'                    # glob
                                                                  'https://youtu.be/Zgi9g1ksQHc'  # YouTube
                                                                  'rtsp://example.com/media.mp4'  # RTSP, RTMP, HTTP stream

Usage - formats:
    $ python segment/predict.py --weights yolov5s-seg.pt                 # PyTorch
                                          yolov5s-seg.torchscript        # TorchScript
                                          yolov5s-seg.onnx               # ONNX Runtime or OpenCV DNN with --dnn
                                          yolov5s-seg_openvino_model     # OpenVINO
                                          yolov5s-seg.engine             # TensorRT
                                          yolov5s-seg.mlmodel            # CoreML (macOS-only)
                                          yolov5s-seg_saved_model        # TensorFlow SavedModel
                                          yolov5s-seg.pb                 # TensorFlow GraphDef
                                          yolov5s-seg.tflite             # TensorFlow Lite
                                          yolov5s-seg_edgetpu.tflite     # TensorFlow Edge TPU
                                          yolov5s-seg_paddle_model       # PaddlePaddle
"""

import argparse
import os
import platform
import sys
from pathlib import Path
import torch

FILE = Path(__file__).resolve()
ROOT = FILE.parents[1]  # –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è YOLOv5
if str(ROOT) not in sys.path:
    sys.path.append(str(ROOT))  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—É—Ç—å
ROOT = Path(os.path.relpath(ROOT, Path.cwd()))  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å

from models.common import DetectMultiBackend
from utils.dataloaders import IMG_FORMATS, VID_FORMATS, LoadImages, LoadScreenshots, LoadStreams
from utils.general import (LOGGER, Profile, check_file, check_img_size, check_imshow, check_requirements, colorstr, cv2,
                           increment_path, non_max_suppression, print_args, scale_boxes, scale_segments,
                           strip_optimizer, xyxy2xywh)
from utils.plots import Annotator, colors, save_one_box
from utils.segment.general import masks2segments, process_mask
from utils.torch_utils import select_device, smart_inference_mode


@smart_inference_mode()
def run(
        weights=ROOT / 'yolov5s-seg.pt',  # –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)
        source=ROOT / 'data/images',  # –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö (—Ñ–∞–π–ª/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è/URL/—ç–∫—Ä–∞–Ω/0 –¥–ª—è –≤–µ–±-–∫–∞–º–µ—Ä—ã)
        data=ROOT / 'data/coco128.yaml',  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–∞—Ç–∞—Å–µ—Ç–∞
        imgsz=(640, 640),  # –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ (–≤—ã—Å–æ—Ç–∞, —à–∏—Ä–∏–Ω–∞)
        conf_thres=0.25,  # –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤
        iou_thres=0.45,  # –ü–æ—Ä–æ–≥ IoU –¥–ª—è NMS
        max_det=1000,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ü–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        device='',  # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (GPU: 0, 0,1,2 –∏–ª–∏ CPU)
        view_img=False,  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        save_txt=False,  # –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        save_conf=False,  # –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–∞—Ö
        save_crop=False,  # –°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—ã—Ä–µ–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        nosave=False,  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/–≤–∏–¥–µ–æ
        classes=None,  # –§–∏–ª—å—Ç—Ä –∫–ª–∞—Å—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: --classes 0 2 3)
        agnostic_nms=False,  # –ö–ª–∞—Å—Å-–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–æ–µ NMS
        augment=False,  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–µ
        visualize=False,  # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏
        update=False,  # –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å–∞ –º–æ–¥–µ–ª–∏
        project=ROOT / 'runs/predict-seg',  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        name='exp',  # –ò–º—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
        exist_ok=False,  # –†–∞–∑—Ä–µ—à–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        line_thickness=3,  # –¢–æ–ª—â–∏–Ω–∞ —Ä–∞–º–æ–∫
        hide_labels=False,  # –°–∫—Ä—ã—Ç—å –º–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–æ–≤
        hide_conf=False,  # –°–∫—Ä—ã—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        half=False,  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FP16
        dnn=False,  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenCV DNN –¥–ª—è ONNX
        vid_stride=1,  # –®–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ–∫–∞–¥—Ä–æ–≤
        retina_masks=False,  # –†–∏—Å–æ–≤–∞—Ç—å –º–∞—Å–∫–∏ –≤ –Ω–∞—Ç–∏–≤–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
):
    source = str(source)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    save_img = not nosave and not source.endswith('.txt')
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    is_file = Path(source).suffix[1:] in (IMG_FORMATS + VID_FORMATS)
    is_url = source.lower().startswith(('rtsp://', 'rtmp://', 'http://', 'https://'))
    webcam = source.isnumeric() or source.endswith('.txt') or (is_url and not is_file)
    screenshot = source.lower().startswith('screen')

    if is_url and is_file:
        source = check_file(source)  # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ URL

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    save_dir = increment_path(Path(project) / name, exist_ok=exist_ok)
    (save_dir / 'labels' if save_txt else save_dir).mkdir(parents=True, exist_ok=True)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    device = select_device(device)
    model = DetectMultiBackend(weights, device=device, dnn=dnn, data=data, fp16=half)
    stride, names, pt = model.stride, model.names, model.pt
    imgsz = check_img_size(imgsz, s=stride)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
    bs = 1  # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
    if webcam:
        view_img = check_imshow(warn=True)
        dataset = LoadStreams(source, img_size=imgsz, stride=stride, auto=pt, vid_stride=vid_stride)
        bs = len(dataset)
    elif screenshot:
        dataset = LoadScreenshots(source, img_size=imgsz, stride=stride, auto=pt)
    else:
        dataset = LoadImages(source, img_size=imgsz, stride=stride, auto=pt, vid_stride=vid_stride)
    vid_path, vid_writer = [None] * bs, [None] * bs

    # –ü—Ä–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏
    model.warmup(imgsz=(1 if pt else bs, 3, *imgsz))

    seen, windows, dt = 0, [], (Profile(), Profile(), Profile())
    for path, im, im0s, vid_cap, s in dataset:
        with dt[0]:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–µ–Ω–∑–æ—Ä
            im = torch.from_numpy(im).to(model.device)
            im = im.half() if model.fp16 else im.float()  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ FP16/FP32
            im /= 255  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            if len(im.shape) == 3:
                im = im[None]  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –±–∞—Ç—á–∞

        # –ò–Ω—Ñ–µ—Ä–µ–Ω—Å
        with dt[1]:
            visualize_path = increment_path(save_dir / Path(path).stem, mkdir=True) if visualize else False
            pred, proto = model(im, augment=augment, visualize=visualize_path)[:2]

        # NMS
        with dt[2]:
            pred = non_max_suppression(pred, conf_thres, iou_thres, classes, agnostic_nms, max_det=max_det, nm=32)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        # pred = utils.general.apply_classifier(pred, classifier_model, im, im0s)

        FILE = Path(__file__).resolve()
        ROOT = FILE.parents[1]  # –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è YOLOv5
        if str(ROOT) not in sys.path:
            sys.path.append(str(ROOT))  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—É—Ç—å
        ROOT = Path(os.path.relpath(ROOT, Path.cwd()))  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å

        from models.common import DetectMultiBackend
        from utils.dataloaders import IMG_FORMATS, VID_FORMATS, LoadImages, LoadScreenshots, LoadStreams
        from utils.general import (LOGGER, Profile, check_file, check_img_size, check_imshow, check_requirements,
                                   colorstr, cv2,
                                   increment_path, non_max_suppression, print_args, scale_boxes, scale_segments,
                                   strip_optimizer, xyxy2xywh)
        from utils.plots import Annotator, colors, save_one_box
        from utils.segment.general import masks2segments, process_mask
        from utils.torch_utils import select_device, smart_inference_mode

        @smart_inference_mode()
        def run(
                weights=ROOT / 'yolov5s-seg.pt',  # –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)
                source=ROOT / 'data/images',  # –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö (—Ñ–∞–π–ª/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è/URL/—ç–∫—Ä–∞–Ω/0 –¥–ª—è –≤–µ–±-–∫–∞–º–µ—Ä—ã)
                data=ROOT / 'data/coco128.yaml',  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–∞—Ç–∞—Å–µ—Ç–∞
                imgsz=(640, 640),  # –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ (–≤—ã—Å–æ—Ç–∞, —à–∏—Ä–∏–Ω–∞)
                conf_thres=0.25,  # –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤
                iou_thres=0.45,  # –ü–æ—Ä–æ–≥ IoU –¥–ª—è NMS
                max_det=1000,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ü–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                device='',  # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (GPU: 0, 0,1,2 –∏–ª–∏ CPU)
                view_img=False,  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ
                save_txt=False,  # –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
                save_conf=False,  # –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–∞—Ö
                save_crop=False,  # –°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—ã—Ä–µ–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
                nosave=False,  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/–≤–∏–¥–µ–æ
                classes=None,  # –§–∏–ª—å—Ç—Ä –∫–ª–∞—Å—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: --classes 0 2 3)
                agnostic_nms=False,  # –ö–ª–∞—Å—Å-–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–æ–µ NMS
                augment=False,  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–µ
                visualize=False,  # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏
                update=False,  # –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å–∞ –º–æ–¥–µ–ª–∏
                project=ROOT / 'runs/predict-seg',  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                name='exp',  # –ò–º—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
                exist_ok=False,  # –†–∞–∑—Ä–µ—à–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                line_thickness=3,  # –¢–æ–ª—â–∏–Ω–∞ —Ä–∞–º–æ–∫
                hide_labels=False,  # –°–∫—Ä—ã—Ç—å –º–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–æ–≤
                hide_conf=False,  # –°–∫—Ä—ã—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                half=False,  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FP16
                dnn=False,  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenCV DNN –¥–ª—è ONNX
                vid_stride=1,  # –®–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ–∫–∞–¥—Ä–æ–≤
                retina_masks=False,  # –†–∏—Å–æ–≤–∞—Ç—å –º–∞—Å–∫–∏ –≤ –Ω–∞—Ç–∏–≤–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
        ):
            source = str(source)
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            save_img = not nosave and not source.endswith('.txt')
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            is_file = Path(source).suffix[1:] in (IMG_FORMATS + VID_FORMATS)
            is_url = source.lower().startswith(('rtsp://', 'rtmp://', 'http://', 'https://'))
            webcam = source.isnumeric() or source.endswith('.txt') or (is_url and not is_file)
            screenshot = source.lower().startswith('screen')

            if is_url and is_file:
                source = check_file(source)  # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ URL

            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            save_dir = increment_path(Path(project) / name, exist_ok=exist_ok)
            (save_dir / 'labels' if save_txt else save_dir).mkdir(parents=True, exist_ok=True)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
            device = select_device(device)
            model = DetectMultiBackend(weights, device=device, dnn=dnn, data=data, fp16=half)
            stride, names, pt = model.stride, model.names, model.pt
            imgsz = check_img_size(imgsz, s=stride)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            bs = 1  # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
            if webcam:
                view_img = check_imshow(warn=True)
                dataset = LoadStreams(source, img_size=imgsz, stride=stride, auto=pt, vid_stride=vid_stride)
                bs = len(dataset)
            elif screenshot:
                dataset = LoadScreenshots(source, img_size=imgsz, stride=stride, auto=pt)
            else:
                dataset = LoadImages(source, img_size=imgsz, stride=stride, auto=pt, vid_stride=vid_stride)
            vid_path, vid_writer = [None] * bs, [None] * bs

            # –ü—Ä–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏
            model.warmup(imgsz=(1 if pt else bs, 3, *imgsz))

            seen, windows, dt = 0, [], (Profile(), Profile(), Profile())
            for path, im, im0s, vid_cap, s in dataset:
                with dt[0]:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–µ–Ω–∑–æ—Ä
                    im = torch.from_numpy(im).to(model.device)
                    im = im.half() if model.fp16 else im.float()  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ FP16/FP32
                    im /= 255  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
                    if len(im.shape) == 3:
                        im = im[None]  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –±–∞—Ç—á–∞

                # –ò–Ω—Ñ–µ—Ä–µ–Ω—Å
                with dt[1]:
                    visualize_path = increment_path(save_dir / Path(path).stem, mkdir=True) if visualize else False
                    pred, proto = model(im, augment=augment, visualize=visualize_path)[:2]

                # NMS
                with dt[2]:
                    pred = non_max_suppression(pred, conf_thres, iou_thres, classes, agnostic_nms, max_det=max_det,
                                               nm=32)

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
                # pred = utils.general.apply_classifier(pred, classifier_model, im, im0s)

def parse_opt():
    parser = argparse.ArgumentParser()

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
    parser.add_argument('--weights', nargs='+', type=str,
                        default=ROOT / 'runs/train-seg/exp6/weights/best.pt',
                        help='–ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º —Å –≤–µ—Å–∞–º–∏ –º–æ–¥–µ–ª–∏')
    parser.add_argument('--source', type=str,
                        default=ROOT / 'C:/Users/C110/Desktop/car3.jpg',
                        help='–∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö (—Ñ–∞–π–ª/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è/URL/—ç–∫—Ä–∞–Ω/0 –¥–ª—è –≤–µ–±-–∫–∞–º–µ—Ä—ã)')
    parser.add_argument('--data', type=str,
                        default=ROOT / 'data/coco128.yaml',
                        help='–ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–∞—Ç–∞—Å–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
    parser.add_argument('--imgsz', '--img', '--img-size', nargs='+', type=int,
                        default=[640],
                        help='—Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ (–≤—ã—Å–æ—Ç–∞, —à–∏—Ä–∏–Ω–∞)')
    parser.add_argument('--conf-thres', type=float, default=0.25,
                        help='–ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤')
    parser.add_argument('--iou-thres', type=float, default=0.45,
                        help='–ø–æ—Ä–æ–≥ IoU –¥–ª—è –Ω–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è (NMS)')
    parser.add_argument('--max-det', type=int, default=1000,
                        help='–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ü–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    parser.add_argument('--device', default='',
                        help='—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0, 0,1,2,3 –∏–ª–∏ cpu)')

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    parser.add_argument('--view-img', action='store_true',
                        help='–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ')
    parser.add_argument('--save-txt', action='store_true',
                        help='—Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã')
    parser.add_argument('--save-conf', action='store_true',
                        help='—Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–∞—Ö')
    parser.add_argument('--save-crop', action='store_true',
                        help='—Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—ã—Ä–µ–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã')
    parser.add_argument('--nosave', action='store_true',
                        help='–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/–≤–∏–¥–µ–æ')

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    parser.add_argument('--classes', nargs='+', type=int,
                        help='—Ñ–∏–ª—å—Ç—Ä –∫–ª–∞—Å—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, --classes 0 2 3)')
    parser.add_argument('--agnostic-nms', action='store_true',
                        help='–∫–ª–∞—Å—Å-–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–æ–µ –Ω–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ')
    parser.add_argument('--augment', action='store_true',
                        help='–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–µ')

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    parser.add_argument('--project', default=ROOT / 'runs/predict-seg',
                        help='–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    parser.add_argument('--name', default='exp',
                        help='–∏–º—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞')
    parser.add_argument('--exist-ok', action='store_true',
                        help='—Ä–∞–∑—Ä–µ—à–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é')

    # –ü—Ä–æ—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('--line-thickness', default=3, type=int,
                        help='—Ç–æ–ª—â–∏–Ω–∞ —Ä–∞–º–æ–∫ –≤–æ–∫—Ä—É–≥ –¥–µ—Ç–µ–∫—Ü–∏–π')
    parser.add_argument('--hide-labels', default=False, action='store_true',
                        help='—Å–∫—Ä—ã—Ç—å –º–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–æ–≤')
    parser.add_argument('--hide-conf', default=False, action='store_true',
                        help='—Å–∫—Ä—ã—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏')
    parser.add_argument('--half', action='store_true',
                        help='–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–æ–≤–∏–Ω–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å (FP16)')
    parser.add_argument('--dnn', action='store_true',
                        help='–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenCV DNN –¥–ª—è ONNX-–∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞')
    parser.add_argument('--vid-stride', type=int, default=1,
                        help='—à–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ–∫–∞–¥—Ä–æ–≤')
    parser.add_argument('--retina-masks', action='store_true',
                        help='–æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –º–∞—Å–∫–∏ –≤ –Ω–∞—Ç–∏–≤–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏')

    opt = parser.parse_args()
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    opt.imgsz *= 2 if len(opt.imgsz) == 1 else 1
    print_args(vars(opt))
    return opt


def main(opt):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    check_requirements(exclude=('tensorboard', 'thop'))
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
    run(**vars(opt))


if __name__ == "__main__":
    opt = parse_opt()
    main(opt)