# YOLOv5 üöÄ –æ—Ç Ultralytics, –ª–∏—Ü–µ–Ω–∑–∏—è GPL-3.0
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ YOLOv5 –¥–ª—è –∑–∞–¥–∞—á–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    $ python val.py --weights yolov5s.pt --data coco128.yaml --img 640

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    $ python val.py --weights yolov5s.pt                 # PyTorch
                              yolov5s.torchscript        # TorchScript
                              yolov5s.onnx               # ONNX Runtime –∏–ª–∏ OpenCV DNN —Å --dnn
                              yolov5s_openvino_model     # OpenVINO
                              yolov5s.engine             # TensorRT
                              yolov5s.mlmodel            # CoreML (—Ç–æ–ª—å–∫–æ –¥–ª—è macOS)
                              yolov5s_saved_model        # TensorFlow SavedModel
                              yolov5s.pb                 # TensorFlow GraphDef
                              yolov5s.tflite             # TensorFlow Lite
                              yolov5s_edgetpu.tflite     # TensorFlow Edge TPU
                              yolov5s_paddle_model       # PaddlePaddle
"""

# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
import argparse
import json
import os
import sys
from pathlib import Path

import numpy as np
import torch
from tqdm import tqdm

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –∏ –∫–∞—Ç–∞–ª–æ–≥–∞–º
FILE = Path(__file__).resolve()
ROOT = FILE.parents[0]  # –ö–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–µ–∫—Ç–∞ YOLOv5
if str(ROOT) not in sys.path:
    sys.path.append(str(ROOT))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ –≤ —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
ROOT = Path(os.path.relpath(ROOT, Path.cwd()))  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –∫–∞—Ç–∞–ª–æ–≥—É

# –ò–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–æ–¥—É–ª–µ–π YOLOv5
from models.common import DetectMultiBackend
from utils.callbacks import Callbacks
from utils.dataloaders import create_dataloader
from utils.general import (
    LOGGER,
    TQDM_BAR_FORMAT,
    Profile,
    check_dataset,
    check_img_size,
    check_requirements,
    check_yaml,
    coco80_to_coco91_class,
    colorstr,
    increment_path,
    non_max_suppression,
    print_args,
    scale_boxes,
    xywh2xyxy,
    xyxy2xywh,
)
from utils.metrics import ConfusionMatrix, ap_per_class, box_iou
from utils.plots import output_to_target, plot_images, plot_val_study
from utils.torch_utils import select_device, smart_inference_mode


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–µ—Ç–µ–∫—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
def save_one_txt(predn, save_conf, shape, file):
    gn = torch.tensor(shape)[[1, 0, 1, 0]]  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ [h, w, h, w]
    for *xyxy, conf, cls in predn.tolist():
        xywh = (xyxy2xywh(torch.tensor(xyxy).view(1, 4)) / gn).view(-1).tolist()  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç xywh
        line = (cls, *xywh, conf) if save_conf else (cls, *xywh)  # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
        with open(file, "a") as f:
            f.write(("%g " * len(line)).rstrip() % line + "\n")  # –ó–∞–ø–∏—Å—å —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–∞–π–ª


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–µ—Ç–µ–∫—Ü–∏–∏ –≤ JSON-—Ñ–∞–π–ª
def save_one_json(predn, jdict, path, class_map):
    image_id = int(path.stem) if path.stem.isnumeric() else path.stem  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    box = xyxy2xywh(predn[:, :4])  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç bounding box –∏–∑ xyxy –≤ xywh
    box[:, :2] -= box[:, 2:] / 2  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ —É–≥–ª–∞
    for p, b in zip(predn.tolist(), box.tolist()):
        jdict.append(
            {
                "image_id": image_id,
                "category_id": class_map[int(p[5])],  # –ú–∞–ø–ø–∏–Ω–≥ –∫–ª–∞—Å—Å–∞
                "bbox": [round(x, 3) for x in b],  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç bounding box –¥–æ 3 –∑–Ω–∞–∫–æ–≤
                "score": round(p[4], 5),  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è confidence –¥–æ 5 –∑–Ω–∞–∫–æ–≤
            }
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞ –¥–µ—Ç–µ–∫—Ü–∏–π
def process_batch(detections, labels, iouv):
    correct = np.zeros((detections.shape[0], iouv.shape[0])).astype(bool)  # –ú–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    iou = box_iou(labels[:, 1:], detections[:, :4])  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ IoU –º–µ–∂–¥—É –∏—Å—Ç–∏–Ω–Ω—ã–º–∏ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º–∏ bounding box
    correct_class = labels[:, 0:1] == detections[:, 5]  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª–∞—Å—Å–æ–≤
    for i in range(len(iouv)):
        x = torch.where((iou >= iouv[i]) & correct_class)  # –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö —É—Å–ª–æ–≤–∏—è–º IoU –∏ –∫–ª–∞—Å—Å–∞
        if x[0].shape[0]:
            matches = (
                torch.cat((torch.stack(x, 1), iou[x[0], x[1]][:, None]), 1)
                .cpu()
                .numpy()
            )  # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
            if x[0].shape[0] > 1:
                matches = matches[matches[:, 2].argsort()[::-1]]  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é IoU
                matches = matches[
                    np.unique(matches[:, 1], return_index=True)[1]
                ]  # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                matches = matches[
                    np.unique(matches[:, 0], return_index=True)[1]
                ]  # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏—Å—Ç–∏–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            correct[matches[:, 1].astype(int), i] = True  # –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –º–∞—Ç—Ä–∏—Ü—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    return torch.tensor(correct, dtype=torch.bool, device=iouv.device)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏
@smart_inference_mode()
def run(
    data,  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    weights=None,  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–∏
    batch_size=32,  # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
    imgsz=640,  # –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ (–≤ –ø–∏–∫—Å–µ–ª—è—Ö)
    conf_thres=0.001,  # –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    iou_thres=0.6,  # –ü–æ—Ä–æ–≥ IoU –¥–ª—è NMS
    max_det=300,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ü–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    task="val",  # –¢–∏–ø –∑–∞–¥–∞—á–∏ (–≤–∞–ª–∏–¥–∞—Ü–∏—è, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç.–¥.)
    device="",  # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π (GPU –∏–ª–∏ CPU)
    workers=8,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    single_cls=False,  # –§–ª–∞–≥ –¥–ª—è –æ–¥–Ω–æ–∫–ª–∞—Å—Å–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    augment=False,  # –§–ª–∞–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–µ
    verbose=False,  # –§–ª–∞–≥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    save_txt=False,  # –§–ª–∞–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    save_hybrid=False,  # –§–ª–∞–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–∏–±—Ä–∏–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–º–µ—Ç–∫–∏ + –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è) –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    save_conf=False,  # –§–ª–∞–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    save_json=False,  # –§–ª–∞–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON-—Ñ–∞–π–ª
    project=ROOT / "runs/val",  # –ö–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    name="exp",  # –ù–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
    exist_ok=False,  # –§–ª–∞–≥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
    half=True,  # –§–ª–∞–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (FP16)
    dnn=False,  # –§–ª–∞–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OpenCV DNN –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ ONNX
    model=None,  # –ú–æ–¥–µ–ª—å (–µ—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞)
    dataloader=None,  # –ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω)
    save_dir=Path(""),  # –ö–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–µ—Å–ª–∏ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω)
    plots=True,  # –§–ª–∞–≥ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    callbacks=Callbacks(),  # –û–±—Ä–∞—Ç–Ω—ã–µ –≤—ã–∑–æ–≤—ã
    compute_loss=None,  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—å (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è/–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    training = model is not None  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–∑–æ–≤ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
    if training:  # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è (–∏–∑ train.py)
        device, pt, jit, engine = (
            next(model.parameters()).device,
            True,
            False,
            False,
        )  # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–æ–¥–µ–ª—å (PyTorch)
        half &= device.type != "cpu"  # –ü–æ–ª—É—Ç–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ CUDA-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
        model.half() if half else model.float()
    else:  # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
        device = select_device(device, batch_size=batch_size)  # –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        save_dir = increment_path(
            Path(project) / name, exist_ok=exist_ok
        )  # –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        (save_dir / "labels" if save_txt else save_dir).mkdir(
            parents=True, exist_ok=True
        )  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –º–µ—Ç–∫–∞–º–∏

        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        model = DetectMultiBackend(
            weights, device=device, dnn=dnn, data=data, fp16=half
        )
        stride, pt, jit, engine = (
            model.stride,
            model.pt,
            model.jit,
            model.engine,
        )
        imgsz = check_img_size(imgsz, s=stride)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        half = model.fp16  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª—É—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if engine:
            batch_size = model.batch_size  # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ TensorRT
        else:
            device = model.device
            if not (pt or jit):
                batch_size = 1  # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –º–æ–¥–µ–ª–µ–π, –Ω–µ –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ PyTorch
                LOGGER.info(
                    f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞ 1 –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ (1,3,{imgsz},{imgsz}) –¥–ª—è –Ω–µ-PyTorch –º–æ–¥–µ–ª–µ–π"
                )

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = check_dataset(data)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏
    model.eval()  # –ü–µ—Ä–µ–≤–æ–¥ –º–æ–¥–µ–ª–∏ –≤ —Ä–µ–∂–∏–º –æ—Ü–µ–Ω–∫–∏
    cuda = device.type != "cpu"  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CUDA
    is_coco = (
        isinstance(data.get("val"), str) and data["val"].endswith(f"coco{os.sep}val2017.txt")
    )  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö COCO
    nc = 1 if single_cls else int(data["nc"])  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤
    iouv = torch.linspace(0.5, 0.95, 10, device=device)  # –í–µ–∫—Ç–æ—Ä IoU –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è mAP@0.5:0.95
    niou = iouv.numel()  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π IoU

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if not training:
        if pt and not single_cls:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–µ—Å–æ–≤ –∏ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            ncm = model.model.nc
            assert (
                ncm == nc
            ), f"{weights} ({ncm} –∫–ª–∞—Å—Å–æ–≤) –æ–±—É—á–µ–Ω–∞ –Ω–∞ –¥—Ä—É–≥–æ–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö, —á–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ({nc} –∫–ª–∞—Å—Å–æ–≤). –ü–µ—Ä–µ–¥–∞–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é --weights –∏ --data."
        model.warmup(imgsz=(1 if pt else batch_size, 3, imgsz, imgsz))  # –ü—Ä–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏
        pad, rect = (0.0, False) if task == "speed" else (0.5, pt)  # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
        task = task if task in ("train", "val", "test") else "val"  # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        dataloader = create_dataloader(
            data[task],
            imgsz,
            batch_size,
            stride,
            single_cls,
            pad=pad,
            rect=rect,
            workers=workers,
            prefix=colorstr(f"{task}: "),
        )[0]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    seen = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    confusion_matrix = ConfusionMatrix(nc=nc)  # –ú–∞—Ç—Ä–∏—Ü–∞Ê∑∑Ê∑Ü
    names = (
        model.names if hasattr(model, "names") else model.module.names
    )  # –ù–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
    if isinstance(names, (list, tuple)):  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        names = dict(enumerate(names))
    class_map = coco80_to_coco91_class() if is_coco else list(range(1000))  # –ú–∞–ø–ø–∏–Ω–≥ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è COCO
    s = (
        "%22s" + "%11s" * 6
    ) % ("–ö–ª–∞—Å—Å", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "–≠–∫–∑–µ–º–ø–ª—è—Ä—ã", "–¢–æ—á–Ω–æ—Å—Ç—å", "–ü–æ–ª–Ω–æ—Ç–∞", "mAP50", "mAP50-95")  # –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
    tp, fp, p, r, f1, mp, mr, map50, ap50, map = (
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    )  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
    dt = Profile(), Profile(), Profile()  # –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    loss = torch.zeros(3, device=device)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–µ—Ä—å
    jdict, stats, ap, ap_class = [], [], [], []  # –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    callbacks.run("on_val_start")  # –í—ã–∑–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    pbar = tqdm(
        dataloader, desc=s, bar_format=TQDM_BAR_FORMAT
    )  # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–µ–π –¥–∞–Ω–Ω—ã—Ö
    for batch_i, (im, targets, paths, shapes) in enumerate(pbar):
        callbacks.run("on_val_batch_start")  # –í—ã–∑–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        with dt[0]:  # –í—Ä–µ–º—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏
            if cuda:
                im = im.to(device, non_blocking=True)  # –ü–µ—Ä–µ–Ω–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                targets = targets.to(device)
            im = im.half() if half else im.float()  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –ø–æ–ª—É—Ç–æ—á–Ω—ã–π –∏–ª–∏ —Ç–æ—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            im /= 255  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            nb, _, height, width = im.shape  # –†–∞–∑–º–µ—Ä—ã –±–∞—Ç—á–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

        # –ò–Ω—Ñ–µ—Ä–µ–Ω—Å
        with dt[1]:  # –í—Ä–µ–º—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
            preds, train_out = model(im) if compute_loss else (model(im, augment=augment), None)

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å
        if compute_loss:
            loss += compute_loss(train_out, targets)[1]  # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å

        # –ù–µ–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ (NMS)
        targets[:, 2:] *= torch.tensor(
            (width, height, width, height), device=device
        )  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ü–µ–ª–µ–≤—ã—Ö bounding box –≤ –ø–∏–∫—Å–µ–ª–∏
        lb = (
            [targets[targets[:, 0] == i, 1:] for i in range(nb)]
            if save_hybrid
            else []
        )  # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–∏–±—Ä–∏–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        with dt[2]:  # –í—Ä–µ–º—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏
            preds = non_max_suppression(
                preds,
                conf_thres,
                iou_thres,
                labels=lb,
                multi_label=True,
                agnostic=single_cls,
                max_det=max_det,
            )

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        for si, pred in enumerate(preds):
            labels = targets[targets[:, 0] == si, 1:]  # –ò—Å—Ç–∏–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            nl, npr = labels.shape[0], pred.shape[0]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–∏–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            path, shape = Path(paths[si]), shapes[si][0]  # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏ –µ–≥–æ —Ñ–æ—Ä–º–∞
            correct = torch.zeros(
                npr, niou, dtype=torch.bool, device=device
            )  # –ú–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            seen += 1  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

            if npr == 0:  # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                if nl:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
                    stats.append(
                        (correct, *torch.zeros((2, 0), device=device), labels[:, 0])
                    )  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    if plots:
                        confusion_matrix.process_batch(
                            detections=None, labels=labels[:, 0]
                        )  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ãÊ∑∑Ê∑Ü
                continue

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            if single_cls:
                pred[:, 5] = 0  # –î–ª—è –æ–¥–Ω–æ–∫–ª–∞—Å—Å–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞—Å—Å 0
            predn = pred.clone()
            scale_boxes(
                im[si].shape[1:], predn[:, :4], shape, shapes[si][1]
            )  # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ bounding box –¥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

            # –û—Ü–µ–Ω–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            if nl:
                tbox = xywh2xyxy(labels[:, 1:5])  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–∏–Ω–Ω—ã—Ö bounding box –≤ —Ñ–æ—Ä–º–∞—Ç xyxy
                scale_boxes(
                    im[si].shape[1:], tbox, shape, shapes[si][1]
                )  # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–∏–Ω–Ω—ã—Ö bounding box
                labelsn = torch.cat((labels[:, 0:1], tbox), 1)  # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –∏—Å—Ç–∏–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ bounding box
                correct = process_batch(predn, labelsn, iouv)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                if plots:
                    confusion_matrix.process_batch(predn, labelsn)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ãÊ∑∑Ê∑Ü
            stats.append((correct, pred[:, 4], pred[:, 5], labels[:, 0]))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if save_txt:
                save_one_txt(predn, save_conf, shape, file=save_dir / "labels" / f"{path.stem}.txt")
            if save_json:
                save_one_json(predn, jdict, path, class_map)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
            callbacks.run("on_val_image_end", pred, predn, path, names, im[si])  # –í—ã–∑–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        if plots and batch_i < 3:
            plot_images(im, targets, paths, save_dir / f"val_batch{batch_i}_labels.jpg", names)  # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –º–µ—Ç–∫–∞–º–∏
            plot_images(im, output_to_target(preds), paths, save_dir / f"val_batch{batch_i}_pred.jpg", names)  # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
        callbacks.run("on_val_batch_end", batch_i, im, targets, paths, shapes, preds)  # –í—ã–∑–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    stats = [torch.cat(x, 0).cpu().numpy() for x in zip(*stats)]  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ numpy
    if len(stats) and stats[0].any():
        tp, fp, p, r, f1, ap, ap_class = ap_per_class(
            *stats, plot=plots, save_dir=save_dir, names=names
        )  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ AP –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
        ap50, ap = ap[:, 0], ap.mean(1)  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ mAP@0.5 –∏ mAP@0.5:0.95
        mp, mr, map50, map = p.mean(), r.mean(), ap50.mean(), ap.mean()  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫
    nt = np.bincount(
        stats[3].astype(int), minlength=nc
    )  # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å—Ç–∏–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    pf = "%22s" + "%11i" * 2 + "%11.3g" * 4  # –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
    LOGGER.info(pf % ("–í—Å–µ", seen, nt.sum(), mp, mr, map50, map))  # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
    if nt.sum() == 0:
        LOGGER.warning(
            f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚ö†Ô∏è –≤ –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö {task} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Ç–æ–∫, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –±–µ–∑ –º–µ—Ç–æ–∫"
        )  # –í—ã–≤–æ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ—Ç –º–µ—Ç–æ–∫

    # –í—ã–≤–æ–¥ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    if (verbose or (nc < 50 and not training)) and nc > 1 and len(stats):
        for i, c in enumerate(ap_class):
            LOGGER.info(pf % (names[c], seen, nt[c], p[i], r[i], ap50[i], ap[i]))  # –í—ã–≤–æ–¥ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞

    # –í—ã–≤–æ–¥ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    t = tuple(x.t / seen * 1E3 for x in dt)  # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    if not training:
        shape = (batch_size, 3, imgsz, imgsz)  # –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        LOGGER.info(
            f"–°–∫–æ—Ä–æ—Å—Ç—å: %.1f–º—Å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞, %.1f–º—Å –∏–Ω—Ñ–µ—Ä–µ–Ω—Å, %.1f–º—Å NMS –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–µ—Ä–µ {shape}"
            % t
        )  # –í—ã–≤–æ–¥ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    if plots:
        confusion_matrix.plot(save_dir=save_dir, names=list(names.values()))  # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ãÊ∑∑Ê∑Ü
        callbacks.run("on_val_end", nt, tp, fp, p, r, f1, ap, ap50, ap_class, confusion_matrix)  # –í—ã–∑–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON
    if save_json and len(jdict):
        w = (
            Path(weights[0] if isinstance(weights, list) else weights).stem
            if weights is not None
            else ""
        )  # –ò–º—è —Ñ–∞–π–ª–∞ –≤–µ—Å–æ–≤ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        anno_json = str(
            Path(data.get("path", "../coco")) / "annotations/instances_val2017.json"
        )  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π COCO
        pred_json = str(save_dir / f"{w}_predictions.json")  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
        LOGGER.info(f"\n–û—Ü–µ–Ω–∫–∞ mAP —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pycocotools... —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {pred_json}...")
        with open(pred_json, "w") as f:
            json.dump(jdict, f)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –≤ JSON

        try:  # –û—Ü–µ–Ω–∫–∞ mAP —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pycocotools
            check_requirements("pycocotools")
            from pycocotools.coco import COCO
            from pycocotools.cocoeval import COCOeval

            anno = COCO(anno_json)  # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
            pred = anno.loadRes(pred_json)  # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            eval = COCOeval(anno, pred, "bbox")
            if is_coco:
                eval.params.imgIds = [
                    int(Path(x).stem) for x in dataloader.dataset.im_files
                ]  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏
            eval.evaluate()
            eval.accumulate()
            eval.summarize()
            map, map50 = eval.stats[:2]  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ mAP
        except Exception as e:
            LOGGER.info(f"pycocotools –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω: {e}")

    # –í–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    model.float()  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ —Ç–æ—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    if not training:
        s = (
            f"\n{len(list(save_dir.glob('labels/*.txt')))} –º–µ—Ç–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {save_dir / 'labels'}"
            if save_txt
            else ""
        )  # –í—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
        LOGGER.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {colorstr('bold', save_dir)}{s}")  # –í—ã–≤–æ–¥ –ø—É—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    maps = np.zeros(nc) + map  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è mAP –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    for i, c in enumerate(ap_class):
        maps[c] = ap[i]  # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ mAP –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    return (
        (mp, mr, map50, map, *(loss.cpu() / len(dataloader)).tolist()),
        maps,
        t,
    )  # –í–æ–∑–≤—Ä–∞—Ç –º–µ—Ç—Ä–∏–∫, mAP –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏


# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
def parse_opt():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--data", type=str, default=ROOT / "data/coco128.yaml", help="–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"
    )
    parser.add_argument(
        "--weights", nargs="+", type=str, default=ROOT / "yolov5s.pt", help="–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–∏"
    )
    parser.add_argument("--batch-size", type=int, default=32, help="—Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞")
    parser.add_argument(
        "--imgsz", "--img", "--img-size", type=int, default=640, help="—Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ (–≤ –ø–∏–∫—Å–µ–ª—è—Ö)"
    )
    parser.add_argument(
        "--conf-thres", type=float, default=0.001, help="–ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"
    )
    parser.add_argument("--iou-thres", type=float, default=0.6, help="–ø–æ—Ä–æ–≥ IoU –¥–ª—è NMS")
    parser.add_argument(
        "--max-det", type=int, default=300, help="–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ü–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    )
    parser.add_argument("--task", default="val", help="—Ç–∏–ø –∑–∞–¥–∞—á–∏ (–æ–±—É—á–µ–Ω–∏–µ, –≤–∞–ª–∏–¥–∞—Ü–∏—è, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—Ü–µ–Ω–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ)")
    parser.add_argument("--device", default="", help="—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π (–Ω–æ–º–µ—Ä CUDA-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–ª–∏ CPU)")
    parser.add_argument("--workers", type=int, default=8, help="–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument("--single-cls", action="store_true", help="–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –æ–¥–Ω–æ–∫–ª–∞—Å—Å–æ–≤–æ–≥–æ")
    parser.add_argument("--augment", action="store_true", help="–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–µ")
    parser.add_argument("--verbose", action="store_true", help="–ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞")
    parser.add_argument("--save-txt", action="store_true", help="—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª")
    parser.add_argument("--save-hybrid", action="store_true", help="—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–º–µ—Ç–∫–∏ + –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è) –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª")
    parser.add_argument("--save-conf", action="store_true", help="—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª")
    parser.add_argument("--save-json", action="store_true", help="—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON-—Ñ–∞–π–ª")
    parser.add_argument("--project", default=ROOT / "runs/val", help="–∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    parser.add_argument("--name", default="exp", help="–Ω–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞")
    parser.add_argument("--exist-ok", action="store_true", help="—Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞")
    parser.add_argument("--half", action="store_true", help="–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (FP16) –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞")
    parser.add_argument("--dnn", action="store_true", help="–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ OpenCV DNN –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ ONNX")
    opt = parser.parse_args()
    opt.data = check_yaml(opt.data)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    opt.save_json |= opt.data.endswith("coco.yaml")
    opt.save_txt |= opt.save_hybrid
    print_args(vars(opt))
    return opt


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main(opt):
    check_requirements(exclude=("tensorboard", "thop"))

    if opt.task in ("train", "val", "test"):  # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        if opt.conf_thres > 0.001:
            LOGGER.info(
                f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚ö†Ô∏è –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ {opt.conf_thres} > 0.001 –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"
            )
        if opt.save_hybrid:
            LOGGER.info(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚ö†Ô∏è --save-hybrid –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –≤—ã—Å–æ–∫–æ–π mAP –∏–∑ –≥–∏–±—Ä–∏–¥–Ω—ã—Ö –º–µ—Ç–æ–∫, –∞ –Ω–µ –∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"
            )
        run(**vars(opt))

    else:
        weights = opt.weights if isinstance(opt.weights, list) else [opt.weights]
        opt.half = torch.cuda.is_available() and opt.device != "cpu"
        if opt.task == "speed":  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
            opt.conf_thres, opt.iou_thres, opt.save_json = 0.25, 0.45, False
            for opt.weights in weights:
                run(**vars(opt), plots=False)

        elif opt.task == "study":  # –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ —Ç–æ—á–Ω–æ—Å—Ç—å—é
            for opt.weights in weights:
                f = (
                    f"study_{Path(opt.data).stem}_{Path(opt.weights).stem}.txt"
                )  # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                x, y = list(range(256, 1536 + 128, 128)), []  # –î–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                for opt.imgsz in x:  # –ü–µ—Ä–µ–±–æ—Ä —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    LOGGER.info(f"\n–ó–∞–ø—É—Å–∫ {f} --imgsz {opt.imgsz}...")
                    r, _, t = run(**vars(opt), plots=False)
                    y.append(r + t)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                np.savetxt(f, y, fmt="%10.4g")  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
            os.system("zip -r study.zip study_*.txt")  # –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            plot_val_study(x=x)  # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ —Ç–æ—á–Ω–æ—Å—Ç—å—é


if __name__ == "__main__":
    opt = parse_opt()
    main(opt)