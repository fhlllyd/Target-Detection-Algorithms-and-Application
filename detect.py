# YOLOv5 üöÄ –æ—Ç Ultralytics, –ª–∏—Ü–µ–Ω–∑–∏—è GPL-3.0
"""
–ó–∞–ø—É—Å–∫ YOLOv5 –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö, –≤–∏–¥–µ–æ, –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö, –≤–µ–±–∫–∞–º–µ—Ä–∞—Ö, –ø–æ—Ç–æ–∫–∞—Ö –∏ —Ç.–¥.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - –∏—Å—Ç–æ—á–Ω–∏–∫–∏:
    $ python detect.py --weights yolov5s.pt --source 0                               # –≤–µ–±–∫–∞–º–µ—Ä–∞
                                                     img.jpg                         # –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                                     vid.mp4                         # –≤–∏–¥–µ–æ
                                                     screen                          # —Å–∫—Ä–∏–Ω—à–æ—Ç
                                                     path/                           # –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                                                     'path/*.jpg'                    # glob
                                                     'https://youtu.be/Zgi9g1ksQHc'  # YouTube
                                                     'rtsp://example.com/media.mp4'  # RTSP, RTMP, HTTP –ø–æ—Ç–æ–∫

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - —Ñ–æ—Ä–º–∞—Ç—ã:
    $ python detect.py --weights yolov5s.pt                 # PyTorch
                                 yolov5s.torchscript        # TorchScript
                                 yolov5s.onnx               # ONNX Runtime –∏–ª–∏ OpenCV DNN —Å --dnn
                                 yolov5s_openvino_model     # OpenVINO
                                 yolov5s.engine             # TensorRT
                                 yolov5s.mlmodel            # CoreML (—Ç–æ–ª—å–∫–æ macOS)
                                 yolov5s_saved_model        # TensorFlow SavedModel
                                 yolov5s.pb                 # TensorFlow GraphDef
                                 yolov5s.tflite             # TensorFlow Lite
                                 yolov5s_edgetpu.tflite     # TensorFlow Edge TPU
                                 yolov5s_paddle_model       # PaddlePaddle
"""

import argparse
import os
import platform
import sys
from pathlib import Path

import torch

FILE = Path(__file__).resolve()
ROOT = FILE.parents[0]  # –ö–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ YOLOv5
if str(ROOT) not in sys.path:
    sys.path.append(str(ROOT))  # –î–æ–±–∞–≤–ª—è–µ–º ROOT –≤ PATH
ROOT = Path(os.path.relpath(ROOT, Path.cwd()))  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å

from models.common import DetectMultiBackend
from utils.dataloaders import IMG_FORMATS, VID_FORMATS, LoadImages, LoadScreenshots, LoadStreams
from utils.general import (LOGGER, Profile, check_file, check_img_size, check_imshow, check_requirements, colorstr, cv2,
                           increment_path, non_max_suppression, print_args, scale_boxes, strip_optimizer, xyxy2xywh)
from utils.plots import Annotator, colors, save_one_box
from utils.torch_utils import select_device, smart_inference_mode


@smart_inference_mode()
def run(
        weights=ROOT / 'yolov5s.pt',  # –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ –∏–ª–∏ Triton URL
        source=ROOT / 'data/images',  # –§–∞–π–ª/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è/URL/glob/—Å–∫—Ä–∏–Ω—à–æ—Ç/0(–≤–µ–±–∫–∞–º–µ—Ä–∞)
        data=ROOT / 'data/coco128.yaml',  # –ü—É—Ç—å –∫ dataset.yaml
        imgsz=(640, 640),  # –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ (–≤—ã—Å–æ—Ç–∞, —à–∏—Ä–∏–Ω–∞)
        conf_thres=0.25,  # –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        iou_thres=0.45,  # –ü–æ—Ä–æ–≥ IoU –¥–ª—è NMS
        max_det=1000,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ü–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        device='',  # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ CUDA, –Ω–∞–ø—Ä–∏–º–µ—Ä, 0 –∏–ª–∏ 0,1,2,3 –∏–ª–∏ cpu
        view_img=False,  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        save_txt=False,  # –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ *.txt
        save_conf=False,  # –°–æ—Ö—Ä–∞–Ω—è—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –º–µ—Ç–∫–∞—Ö --save-txt
        save_crop=False,  # –°–æ—Ö—Ä–∞–Ω—è—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
        nosave=False,  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/–≤–∏–¥–µ–æ
        classes=None,  # –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∫–ª–∞—Å—Å–∞–º
        agnostic_nms=False,  # –ö–ª–∞—Å—Å-–Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è NMS
        augment=False,  # –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å
        visualize=False,  # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        update=False,  # –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏
        project=ROOT / 'runs/detect',  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ project/name
        name='exp',  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ project/name
        exist_ok=False,  # –î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π project/name, –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å
        line_thickness=3,  # –¢–æ–ª—â–∏–Ω–∞ —Ä–∞–º–∫–∏ (–ø–∏–∫—Å–µ–ª–∏)
        hide_labels=False,  # –°–∫—Ä—ã—Ç—å –º–µ—Ç–∫–∏
        hide_conf=False,  # –°–∫—Ä—ã—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        half=False,  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FP16 –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ —Å –ø–æ–ª—É–ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
        dnn=False,  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenCV DNN –¥–ª—è ONNX –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
        vid_stride=1,  # –®–∞–≥ –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏ –≤–∏–¥–µ–æ
):
    source = str(source)
    save_img = not nosave and not source.endswith('.txt')  # –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    is_file = Path(source).suffix[1:] in (IMG_FORMATS + VID_FORMATS)
    is_url = source.lower().startswith(('rtsp://', 'rtmp://', 'http://', 'https://'))
    webcam = source.isnumeric() or source.endswith('.txt') or (is_url and not is_file)
    screenshot = source.lower().startswith('screen')
    if is_url and is_file:
        source = check_file(source)  # –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª

    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    save_dir = increment_path(Path(project) / name, exist_ok=exist_ok)  # –£–≤–µ–ª–∏—á–∏—Ç—å –Ω–æ–º–µ—Ä –∑–∞–ø—É—Å–∫–∞
    (save_dir / 'labels' if save_txt else save_dir).mkdir(parents=True, exist_ok=True)  # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é

    # –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å
    device = select_device(device)
    model = DetectMultiBackend(weights, device=device, dnn=dnn, data=data, fp16=half)
    stride, names, pt = model.stride, model.names, model.pt
    imgsz = check_img_size(imgsz, s=stride)  # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    # –ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
    bs = 1  # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
    if webcam:
        view_img = check_imshow(warn=True)
        dataset = LoadStreams(source, img_size=imgsz, stride=stride, auto=pt, vid_stride=vid_stride)
        bs = len(dataset)
    elif screenshot:
        dataset = LoadScreenshots(source, img_size=imgsz, stride=stride, auto=pt)
    else:
        dataset = LoadImages(source, img_size=imgsz, stride=stride, auto=pt, vid_stride=vid_stride)
    vid_path, vid_writer = [None] * bs, [None] * bs

    # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–µ—Ä–µ–Ω—Å
    model.warmup(imgsz=(1 if pt or model.triton else bs, 3, *imgsz))  # –†–∞–∑–æ–≥—Ä–µ–≤
    seen, windows, dt = 0, [], (Profile(), Profile(), Profile())
    for path, im, im0s, vid_cap, s in dataset:
        with dt[0]:
            im = torch.from_numpy(im).to(model.device)
            im = im.half() if model.fp16 else im.float()  # uint8 –≤ fp16/32
            im /= 255  # 0 - 255 –≤ 0.0 - 1.0
            if len(im.shape) == 3:
                im = im[None]  # –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞

        # –ò–Ω—Ñ–µ—Ä–µ–Ω—Å
        with dt[1]:
            visualize = increment_path(save_dir / Path(path).stem, mkdir=True) if visualize else False
            pred = model(im, augment=augment, visualize=visualize)

        # NMS
        with dt[2]:
            pred = non_max_suppression(pred, conf_thres, iou_thres, classes, agnostic_nms, max_det=max_det)

        # –í—Ç–æ—Ä–∏—á–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        # pred = utils.general.apply_classifier(pred, classifier_model, im, im0s)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        for i, det in enumerate(pred):  # –ù–∞ –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            seen += 1
            if webcam:  # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ >= 1
                p, im0, frame = path[i], im0s[i].copy(), dataset.count
                s += f'{i}: '
            else:
                p, im0, frame = path, im0s.copy(), getattr(dataset, 'frame', 0)

            p = Path(p)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ Path
            save_path = str(save_dir / p.name)  # im.jpg
            txt_path = str(save_dir / 'labels' / p.stem) + ('' if dataset.mode == 'image' else f'_{frame}')  # im.txt
            s += '%gx%g ' % im.shape[2:]  # –°—Ç—Ä–æ–∫–∞ –≤—ã–≤–æ–¥–∞
            gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ whwh
            imc = im0.copy() if save_crop else im0  # –î–ª—è save_crop
            annotator = Annotator(im0, line_width=line_thickness, example=str(names))
            if len(det):
                # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–º–æ–∫ —Å img_size –Ω–∞ im0 —Ä–∞–∑–º–µ—Ä
                det[:, :4] = scale_boxes(im.shape[2:], det[:, :4], im0.shape).round()

                # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                for c in det[:, 5].unique():
                    n = (det[:, 5] == c).sum()  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ü–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∞
                    s += f"{n} {names[int(c)]}{'s' * (n > 1)}, "  # –î–æ–±–∞–≤–∏—Ç—å –∫ —Å—Ç—Ä–æ–∫–µ

                # –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                for *xyxy, conf, cls in reversed(det):
                    if save_txt:  # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
                        xywh = (xyxy2xywh(torch.tensor(xyxy).view(1, 4)) / gn).view(-1).tolist()  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ xywh
                        line = (cls, *xywh, conf) if save_conf else (cls, *xywh)  # –§–æ—Ä–º–∞—Ç –º–µ—Ç–∫–∏
                        with open(f'{txt_path}.txt', 'a') as f:
                            f.write(('%g ' * len(line)).rstrip() % line + '\n')

                    if save_img or save_crop or view_img:  # –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–º–∫—É –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                        c = int(cls)  # –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å
                        label = None if hide_labels else (names[c] if hide_conf else f'{names[c]} {conf:.2f}')
                        annotator.box_label(xyxy, label, color=colors(c, True))
                    if save_crop:
                        save_one_box(xyxy, imc, file=save_dir / 'crops' / names[c] / f'{p.stem}.jpg', BGR=True)

            # –ü–æ—Ç–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            im0 = annotator.result()
            if view_img:
                if platform.system() == 'Linux' and p not in windows:
                    windows.append(p)
                    cv2.namedWindow(str(p), cv2.WINDOW_NORMAL | cv2.WINDOW_KEEPRATIO)  # –†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ (Linux)
                    cv2.resizeWindow(str(p), im0.shape[1], im0.shape[0])
                cv2.imshow(str(p), im0)
                cv2.waitKey(1)  # 1 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏)
            if save_img:
                if dataset.mode == 'image':
                    cv2.imwrite(save_path, im0)
                else:  # 'video' –∏–ª–∏ 'stream'
                    if vid_path[i] != save_path:  # –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ
                        vid_path[i] = save_path
                        if isinstance(vid_writer[i], cv2.VideoWriter):
                            vid_writer[i].release()  # –û—Å–≤–æ–±–æ–¥–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å—ã–≤–∞—é—â–∏–π –æ–±—ä–µ–∫—Ç
                        if vid_cap:  # –í–∏–¥–µ–æ
                            fps = vid_cap.get(cv2.CAP_PROP_FPS)
                            w = int(vid_cap.get(cv2.CAP_PROP_FRAME_WIDTH))
                            h = int(vid_cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
                        else:  # –ü–æ—Ç–æ–∫
                            fps, w, h = 30, im0.shape[1], im0.shape[0]
                        save_path = str(Path(save_path).with_suffix('.mp4'))  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—Ñ—Ñ–∏–∫—Å *.mp4 –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏—Ö –≤–∏–¥–µ–æ
                        vid_writer[i] = cv2.VideoWriter(save_path, cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))
                    vid_writer[i].write(im0)

        # –í—ã–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å)
        LOGGER.info(f"{s}{'' if len(det) else '(no detections), '}{dt[1].dt * 1E3:.1f}ms")

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    t = tuple(x.t / seen * 1E3 for x in dt)  # –°–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    LOGGER.info(f'–°–∫–æ—Ä–æ—Å—Ç—å: %.1f–º—Å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞, %.1f–º—Å –∏–Ω—Ñ–µ—Ä–µ–Ω—Å, %.1f–º—Å NMS –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–º {(1, 3, *imgsz)}' % t)
    if save_txt or save_img:
        s = f"\n{len(list(save_dir.glob('labels/*.txt')))} –º–µ—Ç–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {save_dir / 'labels'}" if save_txt else ''
        LOGGER.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {colorstr('bold', save_dir)}{s}")
    if update:
        strip_optimizer(weights[0])  # –û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å (–¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SourceChangeWarning)


def parse_opt():
    parser = argparse.ArgumentParser()
    parser.add_argument('--weights', nargs='+', type=str, default=r'C:\Users\Lenovo\Desktop\Êñá‰ª∂Â§π\yolov5-7.0\yolov5-7.0\yolov5s-seg.pt', help='–ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ –∏–ª–∏ Triton URL')
    parser.add_argument('--source', type=str, default=r'C:\Users\Lenovo\Desktop\1.png', help='—Ñ–∞–π–ª/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è/URL/glob/—Å–∫—Ä–∏–Ω—à–æ—Ç/0(–≤–µ–±–∫–∞–º–µ—Ä–∞)')
    parser.add_argument('--data', type=str, default=ROOT / 'data/coco128.yaml', help='(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø—É—Ç—å –∫ dataset.yaml')
    parser.add_argument('--imgsz', '--img', '--img-size', nargs='+', type=int, default=[640], help='—Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è h,w')
    parser.add_argument('--conf-thres', type=float, default=0.25, help='–ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏')
    parser.add_argument('--iou-thres', type=float, default=0.45, help='–ø–æ—Ä–æ–≥ IoU –¥–ª—è NMS')
    parser.add_argument('--max-det', type=int, default=1000, help='–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ü–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏')
    parser.add_argument('--device', default='', help='—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ CUDA, –Ω–∞–ø—Ä–∏–º–µ—Ä, 0 –∏–ª–∏ 0,1,2,3 –∏–ª–∏ cpu')
    parser.add_argument('--view-img', action='store_true', help='–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã')
    parser.add_argument('--save-txt', action='store_true', help='—Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ *.txt')
    parser.add_argument('--save-conf', action='store_true', help='—Å–æ—Ö—Ä–∞–Ω—è—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –º–µ—Ç–∫–∞—Ö --save-txt')
    parser.add_argument('--save-crop', action='store_true', help='—Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–∞–º–∫–∏')
    parser.add_argument('--nosave', action='store_true', help='–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/–≤–∏–¥–µ–æ')
    parser.add_argument('--classes', nargs='+', type=int, help='—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∫–ª–∞—Å—Å–∞–º')
    parser.add_argument('--agnostic-nms', action='store_true', help='–∫–ª–∞—Å—Å-–Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è NMS')
    parser.add_argument('--augment', action='store_true', help='—É–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å')
    parser.add_argument('--visualize', action='store_true', help='–≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏')
    parser.add_argument('--update', action='store_true', help='–æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏')
    parser.add_argument('--project', default=ROOT / 'runs/detect', help='—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ project/name')
    parser.add_argument('--name', default='exp', help='—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ project/name')
    parser.add_argument('--exist-ok', action='store_true', help='–¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π project/name, –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å')
    parser.add_argument('--line-thickness', default=3, type=int, help='—Ç–æ–ª—â–∏–Ω–∞ —Ä–∞–º–∫–∏ (–ø–∏–∫—Å–µ–ª–∏)')
    parser.add_argument('--hide-labels', default=False, action='store_true', help='—Å–∫—Ä—ã—Ç—å –º–µ—Ç–∫–∏')
    parser.add_argument('--hide-conf', default=False, action='store_true', help='—Å–∫—Ä—ã—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å')
    parser.add_argument('--half', action='store_true', help='–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FP16 –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ —Å –ø–æ–ª—É–ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é')
    parser.add_argument('--dnn', action='store_true', help='–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenCV DNN –¥–ª—è ONNX –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞')
    parser.add_argument('--vid-stride', type=int, default=1, help='—à–∞–≥ –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏ –≤–∏–¥–µ–æ')
    opt = parser.parse_args()
    opt.imgsz *= 2 if len(opt.imgsz) == 1 else 1  # –†–∞—Å—à–∏—Ä–∏—Ç—å
    print_args(vars(opt))
    return opt


def main(opt):
    check_requirements(exclude=('tensorboard', 'thop'))
    run(**vars(opt))


if __name__ == "__main__":
    opt = parse_opt()
    main(opt)